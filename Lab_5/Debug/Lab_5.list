
Lab_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003314  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800349c  0800349c  0001349c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034ac  080034ac  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080034ac  080034ac  000134ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034b4  080034b4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034b4  080034b4  000134b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034b8  080034b8  000134b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080034bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000174  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000184  20000184  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b76b  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001bbc  00000000  00000000  0002b7ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000bf8  00000000  00000000  0002d3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000948  00000000  00000000  0002dfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020149  00000000  00000000  0002e8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d1ad  00000000  00000000  0004ea39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c6bc6  00000000  00000000  0005bbe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000323c  00000000  00000000  001227ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  001259e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003484 	.word	0x08003484

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003484 	.word	0x08003484

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fc38 	bl	8000d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f812 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f98c 	bl	80007ec <MX_GPIO_Init>
  MX_SPI3_Init();
 80004d4:	f000 f906 	bl	80006e4 <MX_SPI3_Init>
  MX_SPI1_Init();
 80004d8:	f000 f89a 	bl	8000610 <MX_SPI1_Init>
  MX_SPI2_Init();
 80004dc:	f000 f8cc 	bl	8000678 <MX_SPI2_Init>
  MX_TIM2_Init();
 80004e0:	f000 f936 	bl	8000750 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80004e4:	f000 f870 	bl	80005c8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80004e8:	4801      	ldr	r0, [pc, #4]	; (80004f0 <main+0x2c>)
 80004ea:	f002 fb6f 	bl	8002bcc <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ee:	e7fe      	b.n	80004ee <main+0x2a>
 80004f0:	20000134 	.word	0x20000134

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b094      	sub	sp, #80	; 0x50
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0320 	add.w	r3, r7, #32
 80004fe:	2230      	movs	r2, #48	; 0x30
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f002 ff92 	bl	800342c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	f107 030c 	add.w	r3, r7, #12
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000518:	2300      	movs	r3, #0
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	4b28      	ldr	r3, [pc, #160]	; (80005c0 <SystemClock_Config+0xcc>)
 800051e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000520:	4a27      	ldr	r2, [pc, #156]	; (80005c0 <SystemClock_Config+0xcc>)
 8000522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000526:	6413      	str	r3, [r2, #64]	; 0x40
 8000528:	4b25      	ldr	r3, [pc, #148]	; (80005c0 <SystemClock_Config+0xcc>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <SystemClock_Config+0xd0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a21      	ldr	r2, [pc, #132]	; (80005c4 <SystemClock_Config+0xd0>)
 800053e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	4b1f      	ldr	r3, [pc, #124]	; (80005c4 <SystemClock_Config+0xd0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000550:	2302      	movs	r3, #2
 8000552:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000554:	2301      	movs	r3, #1
 8000556:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000558:	2310      	movs	r3, #16
 800055a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055c:	2302      	movs	r3, #2
 800055e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000560:	2300      	movs	r3, #0
 8000562:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000564:	2308      	movs	r3, #8
 8000566:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000568:	2340      	movs	r3, #64	; 0x40
 800056a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800056c:	2302      	movs	r3, #2
 800056e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000570:	2307      	movs	r3, #7
 8000572:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000574:	f107 0320 	add.w	r3, r7, #32
 8000578:	4618      	mov	r0, r3
 800057a:	f000 ff55 	bl	8001428 <HAL_RCC_OscConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000584:	f000 f9a8 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000588:	230f      	movs	r3, #15
 800058a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058c:	2302      	movs	r3, #2
 800058e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000594:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000598:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800059a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2102      	movs	r1, #2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 f9b6 	bl	8001918 <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005b2:	f000 f991 	bl	80008d8 <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3750      	adds	r7, #80	; 0x50
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023800 	.word	0x40023800
 80005c4:	40007000 	.word	0x40007000

080005c8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2100      	movs	r1, #0
 80005d0:	2033      	movs	r0, #51	; 0x33
 80005d2:	f000 fd00 	bl	8000fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80005d6:	2033      	movs	r0, #51	; 0x33
 80005d8:	f000 fd19 	bl	800100e <HAL_NVIC_EnableIRQ>
  /* SPI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80005dc:	2200      	movs	r2, #0
 80005de:	2100      	movs	r1, #0
 80005e0:	2023      	movs	r0, #35	; 0x23
 80005e2:	f000 fcf8 	bl	8000fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80005e6:	2023      	movs	r0, #35	; 0x23
 80005e8:	f000 fd11 	bl	800100e <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2100      	movs	r1, #0
 80005f0:	201c      	movs	r0, #28
 80005f2:	f000 fcf0 	bl	8000fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005f6:	201c      	movs	r0, #28
 80005f8:	f000 fd09 	bl	800100e <HAL_NVIC_EnableIRQ>
  /* SPI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2100      	movs	r1, #0
 8000600:	2024      	movs	r0, #36	; 0x24
 8000602:	f000 fce8 	bl	8000fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000606:	2024      	movs	r0, #36	; 0x24
 8000608:	f000 fd01 	bl	800100e <HAL_NVIC_EnableIRQ>
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}

08000610 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000614:	4b16      	ldr	r3, [pc, #88]	; (8000670 <MX_SPI1_Init+0x60>)
 8000616:	4a17      	ldr	r2, [pc, #92]	; (8000674 <MX_SPI1_Init+0x64>)
 8000618:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <MX_SPI1_Init+0x60>)
 800061c:	2200      	movs	r2, #0
 800061e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000620:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_SPI1_Init+0x60>)
 8000622:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000626:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_SPI1_Init+0x60>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <MX_SPI1_Init+0x60>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_SPI1_Init+0x60>)
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <MX_SPI1_Init+0x60>)
 800063c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000640:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_SPI1_Init+0x60>)
 8000644:	2200      	movs	r2, #0
 8000646:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_SPI1_Init+0x60>)
 800064a:	2200      	movs	r2, #0
 800064c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_SPI1_Init+0x60>)
 8000650:	2200      	movs	r2, #0
 8000652:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_SPI1_Init+0x60>)
 8000656:	220a      	movs	r2, #10
 8000658:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_SPI1_Init+0x60>)
 800065c:	f001 fb48 	bl	8001cf0 <HAL_SPI_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_SPI1_Init+0x5a>
  {
    Error_Handler();
 8000666:	f000 f937 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000002c 	.word	0x2000002c
 8000674:	40013000 	.word	0x40013000

08000678 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <MX_SPI2_Init+0x64>)
 800067e:	4a18      	ldr	r2, [pc, #96]	; (80006e0 <MX_SPI2_Init+0x68>)
 8000680:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <MX_SPI2_Init+0x64>)
 8000684:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000688:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_SPI2_Init+0x64>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MX_SPI2_Init+0x64>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_SPI2_Init+0x64>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_SPI2_Init+0x64>)
 800069e:	2200      	movs	r2, #0
 80006a0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_SPI2_Init+0x64>)
 80006a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_SPI2_Init+0x64>)
 80006ac:	2210      	movs	r2, #16
 80006ae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <MX_SPI2_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_SPI2_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <MX_SPI2_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_SPI2_Init+0x64>)
 80006c4:	220a      	movs	r2, #10
 80006c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_SPI2_Init+0x64>)
 80006ca:	f001 fb11 	bl	8001cf0 <HAL_SPI_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80006d4:	f000 f900 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000084 	.word	0x20000084
 80006e0:	40003800 	.word	0x40003800

080006e4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80006e8:	4b17      	ldr	r3, [pc, #92]	; (8000748 <MX_SPI3_Init+0x64>)
 80006ea:	4a18      	ldr	r2, [pc, #96]	; (800074c <MX_SPI3_Init+0x68>)
 80006ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <MX_SPI3_Init+0x64>)
 80006f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_SPI3_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_SPI3_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_SPI3_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_SPI3_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_SPI3_Init+0x64>)
 8000710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000714:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_SPI3_Init+0x64>)
 8000718:	2210      	movs	r2, #16
 800071a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_SPI3_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_SPI3_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <MX_SPI3_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_SPI3_Init+0x64>)
 8000730:	220a      	movs	r2, #10
 8000732:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_SPI3_Init+0x64>)
 8000736:	f001 fadb 	bl	8001cf0 <HAL_SPI_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000740:	f000 f8ca 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	200000dc 	.word	0x200000dc
 800074c:	40003c00 	.word	0x40003c00

08000750 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000756:	f107 0308 	add.w	r3, r7, #8
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000764:	463b      	mov	r3, r7
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800076c:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <MX_TIM2_Init+0x98>)
 800076e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000772:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8000774:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_TIM2_Init+0x98>)
 8000776:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800077a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_TIM2_Init+0x98>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <MX_TIM2_Init+0x98>)
 8000784:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000788:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078a:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <MX_TIM2_Init+0x98>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_TIM2_Init+0x98>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000796:	4814      	ldr	r0, [pc, #80]	; (80007e8 <MX_TIM2_Init+0x98>)
 8000798:	f002 f9c9 	bl	8002b2e <HAL_TIM_Base_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80007a2:	f000 f899 	bl	80008d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	4619      	mov	r1, r3
 80007b2:	480d      	ldr	r0, [pc, #52]	; (80007e8 <MX_TIM2_Init+0x98>)
 80007b4:	f002 fb6a 	bl	8002e8c <HAL_TIM_ConfigClockSource>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80007be:	f000 f88b 	bl	80008d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ca:	463b      	mov	r3, r7
 80007cc:	4619      	mov	r1, r3
 80007ce:	4806      	ldr	r0, [pc, #24]	; (80007e8 <MX_TIM2_Init+0x98>)
 80007d0:	f002 fd9c 	bl	800330c <HAL_TIMEx_MasterConfigSynchronization>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80007da:	f000 f87d 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000134 	.word	0x20000134

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b31      	ldr	r3, [pc, #196]	; (80008cc <MX_GPIO_Init+0xe0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a30      	ldr	r2, [pc, #192]	; (80008cc <MX_GPIO_Init+0xe0>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b2e      	ldr	r3, [pc, #184]	; (80008cc <MX_GPIO_Init+0xe0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <MX_GPIO_Init+0xe0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a29      	ldr	r2, [pc, #164]	; (80008cc <MX_GPIO_Init+0xe0>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b27      	ldr	r3, [pc, #156]	; (80008cc <MX_GPIO_Init+0xe0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b23      	ldr	r3, [pc, #140]	; (80008cc <MX_GPIO_Init+0xe0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a22      	ldr	r2, [pc, #136]	; (80008cc <MX_GPIO_Init+0xe0>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b20      	ldr	r3, [pc, #128]	; (80008cc <MX_GPIO_Init+0xe0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <MX_GPIO_Init+0xe0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a1b      	ldr	r2, [pc, #108]	; (80008cc <MX_GPIO_Init+0xe0>)
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b19      	ldr	r3, [pc, #100]	; (80008cc <MX_GPIO_Init+0xe0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0308 	and.w	r3, r3, #8
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2110      	movs	r1, #16
 8000876:	4816      	ldr	r0, [pc, #88]	; (80008d0 <MX_GPIO_Init+0xe4>)
 8000878:	f000 fda2 	bl	80013c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000882:	4814      	ldr	r0, [pc, #80]	; (80008d4 <MX_GPIO_Init+0xe8>)
 8000884:	f000 fd9c 	bl	80013c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000888:	2310      	movs	r3, #16
 800088a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	2301      	movs	r3, #1
 800088e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	480c      	ldr	r0, [pc, #48]	; (80008d0 <MX_GPIO_Init+0xe4>)
 80008a0:	f000 fbf2 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008a4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_GPIO_Init+0xe8>)
 80008be:	f000 fbe3 	bl	8001088 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c2:	bf00      	nop
 80008c4:	3728      	adds	r7, #40	; 0x28
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020000 	.word	0x40020000
 80008d4:	40020c00 	.word	0x40020c00

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x8>
	...

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <HAL_MspInit+0x4c>)
 80008f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f8:	6453      	str	r3, [r2, #68]	; 0x44
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <HAL_MspInit+0x4c>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <HAL_MspInit+0x4c>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	6413      	str	r3, [r2, #64]	; 0x40
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_MspInit+0x4c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8000922:	2006      	movs	r0, #6
 8000924:	f000 fb4c 	bl	8000fc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800

08000934 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08e      	sub	sp, #56	; 0x38
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a5b      	ldr	r2, [pc, #364]	; (8000ac0 <HAL_SPI_MspInit+0x18c>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d12c      	bne.n	80009b0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	623b      	str	r3, [r7, #32]
 800095a:	4b5a      	ldr	r3, [pc, #360]	; (8000ac4 <HAL_SPI_MspInit+0x190>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	4a59      	ldr	r2, [pc, #356]	; (8000ac4 <HAL_SPI_MspInit+0x190>)
 8000960:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000964:	6453      	str	r3, [r2, #68]	; 0x44
 8000966:	4b57      	ldr	r3, [pc, #348]	; (8000ac4 <HAL_SPI_MspInit+0x190>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800096e:	623b      	str	r3, [r7, #32]
 8000970:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
 8000976:	4b53      	ldr	r3, [pc, #332]	; (8000ac4 <HAL_SPI_MspInit+0x190>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a52      	ldr	r2, [pc, #328]	; (8000ac4 <HAL_SPI_MspInit+0x190>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b50      	ldr	r3, [pc, #320]	; (8000ac4 <HAL_SPI_MspInit+0x190>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	61fb      	str	r3, [r7, #28]
 800098c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800098e:	23a0      	movs	r3, #160	; 0xa0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099a:	2303      	movs	r3, #3
 800099c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800099e:	2305      	movs	r3, #5
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a6:	4619      	mov	r1, r3
 80009a8:	4847      	ldr	r0, [pc, #284]	; (8000ac8 <HAL_SPI_MspInit+0x194>)
 80009aa:	f000 fb6d 	bl	8001088 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80009ae:	e082      	b.n	8000ab6 <HAL_SPI_MspInit+0x182>
  else if(hspi->Instance==SPI2)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a45      	ldr	r2, [pc, #276]	; (8000acc <HAL_SPI_MspInit+0x198>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d14b      	bne.n	8000a52 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
 80009be:	4b41      	ldr	r3, [pc, #260]	; (8000ac4 <HAL_SPI_MspInit+0x190>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a40      	ldr	r2, [pc, #256]	; (8000ac4 <HAL_SPI_MspInit+0x190>)
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b3e      	ldr	r3, [pc, #248]	; (8000ac4 <HAL_SPI_MspInit+0x190>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d2:	61bb      	str	r3, [r7, #24]
 80009d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]
 80009da:	4b3a      	ldr	r3, [pc, #232]	; (8000ac4 <HAL_SPI_MspInit+0x190>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a39      	ldr	r2, [pc, #228]	; (8000ac4 <HAL_SPI_MspInit+0x190>)
 80009e0:	f043 0304 	orr.w	r3, r3, #4
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b37      	ldr	r3, [pc, #220]	; (8000ac4 <HAL_SPI_MspInit+0x190>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0304 	and.w	r3, r3, #4
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	4b33      	ldr	r3, [pc, #204]	; (8000ac4 <HAL_SPI_MspInit+0x190>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a32      	ldr	r2, [pc, #200]	; (8000ac4 <HAL_SPI_MspInit+0x190>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b30      	ldr	r3, [pc, #192]	; (8000ac4 <HAL_SPI_MspInit+0x190>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a0e:	230c      	movs	r3, #12
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a1e:	2305      	movs	r3, #5
 8000a20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a26:	4619      	mov	r1, r3
 8000a28:	4829      	ldr	r0, [pc, #164]	; (8000ad0 <HAL_SPI_MspInit+0x19c>)
 8000a2a:	f000 fb2d 	bl	8001088 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a40:	2305      	movs	r3, #5
 8000a42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4822      	ldr	r0, [pc, #136]	; (8000ad4 <HAL_SPI_MspInit+0x1a0>)
 8000a4c:	f000 fb1c 	bl	8001088 <HAL_GPIO_Init>
}
 8000a50:	e031      	b.n	8000ab6 <HAL_SPI_MspInit+0x182>
  else if(hspi->Instance==SPI3)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a20      	ldr	r2, [pc, #128]	; (8000ad8 <HAL_SPI_MspInit+0x1a4>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d12c      	bne.n	8000ab6 <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <HAL_SPI_MspInit+0x190>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	4a17      	ldr	r2, [pc, #92]	; (8000ac4 <HAL_SPI_MspInit+0x190>)
 8000a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6c:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <HAL_SPI_MspInit+0x190>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <HAL_SPI_MspInit+0x190>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a80:	4a10      	ldr	r2, [pc, #64]	; (8000ac4 <HAL_SPI_MspInit+0x190>)
 8000a82:	f043 0304 	orr.w	r3, r3, #4
 8000a86:	6313      	str	r3, [r2, #48]	; 0x30
 8000a88:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <HAL_SPI_MspInit+0x190>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8c:	f003 0304 	and.w	r3, r3, #4
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000a94:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000aa6:	2306      	movs	r3, #6
 8000aa8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4807      	ldr	r0, [pc, #28]	; (8000ad0 <HAL_SPI_MspInit+0x19c>)
 8000ab2:	f000 fae9 	bl	8001088 <HAL_GPIO_Init>
}
 8000ab6:	bf00      	nop
 8000ab8:	3738      	adds	r7, #56	; 0x38
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40013000 	.word	0x40013000
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020000 	.word	0x40020000
 8000acc:	40003800 	.word	0x40003800
 8000ad0:	40020800 	.word	0x40020800
 8000ad4:	40020400 	.word	0x40020400
 8000ad8:	40003c00 	.word	0x40003c00

08000adc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aec:	d10d      	bne.n	8000b0a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_TIM_Base_MspInit+0x3c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	4a08      	ldr	r2, [pc, #32]	; (8000b18 <HAL_TIM_Base_MspInit+0x3c>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6413      	str	r3, [r2, #64]	; 0x40
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_TIM_Base_MspInit+0x3c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b0a:	bf00      	nop
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b20:	e7fe      	b.n	8000b20 <NMI_Handler+0x4>

08000b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <HardFault_Handler+0x4>

08000b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <MemManage_Handler+0x4>

08000b2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b68:	f000 f93a 	bl	8000de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b74:	4812      	ldr	r0, [pc, #72]	; (8000bc0 <TIM2_IRQHandler+0x50>)
 8000b76:	f002 f899 	bl	8002cac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  if(byteIndex < 4) // Ensure we don't exceed our data buffer size
 8000b7a:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <TIM2_IRQHandler+0x54>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	d814      	bhi.n	8000bac <TIM2_IRQHandler+0x3c>
      {
          // Assuming a simple case where you don't need to receive data on hspi1
          HAL_SPI_Transmit(&hspi2, &sendData[byteIndex], 1, 100);
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <TIM2_IRQHandler+0x54>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	461a      	mov	r2, r3
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <TIM2_IRQHandler+0x58>)
 8000b8a:	18d1      	adds	r1, r2, r3
 8000b8c:	2364      	movs	r3, #100	; 0x64
 8000b8e:	2201      	movs	r2, #1
 8000b90:	480e      	ldr	r0, [pc, #56]	; (8000bcc <TIM2_IRQHandler+0x5c>)
 8000b92:	f001 f936 	bl	8001e02 <HAL_SPI_Transmit>
          HAL_SPI_Receive_IT(&hspi1, &receiveData, 1);
 8000b96:	2201      	movs	r2, #1
 8000b98:	490d      	ldr	r1, [pc, #52]	; (8000bd0 <TIM2_IRQHandler+0x60>)
 8000b9a:	480e      	ldr	r0, [pc, #56]	; (8000bd4 <TIM2_IRQHandler+0x64>)
 8000b9c:	f001 fa74 	bl	8002088 <HAL_SPI_Receive_IT>
          byteIndex++; // Move to the next byte for the next interrupt
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <TIM2_IRQHandler+0x54>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <TIM2_IRQHandler+0x54>)
 8000baa:	701a      	strb	r2, [r3, #0]
      }
  if(byteIndex ==3 ){
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <TIM2_IRQHandler+0x54>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b03      	cmp	r3, #3
 8000bb2:	d102      	bne.n	8000bba <TIM2_IRQHandler+0x4a>
	  byteIndex =0;
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <TIM2_IRQHandler+0x54>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
//  HAL_SPI_Transmit(&hspi1, sendData, 1,100); // Send one byte over SPI1
//  HAL_SPI_Receive(&hspi2, receiveData, 1,100); // Receive one byte over SPI2


  /* USER CODE END TIM2_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000134 	.word	0x20000134
 8000bc4:	2000017d 	.word	0x2000017d
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000084 	.word	0x20000084
 8000bd0:	2000017c 	.word	0x2000017c
 8000bd4:	2000002c 	.word	0x2000002c

08000bd8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */
	if(receiveData == 1){
 8000bdc:	4b2c      	ldr	r3, [pc, #176]	; (8000c90 <SPI1_IRQHandler+0xb8>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d106      	bne.n	8000bf2 <SPI1_IRQHandler+0x1a>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);
 8000be4:	2201      	movs	r2, #1
 8000be6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bea:	482a      	ldr	r0, [pc, #168]	; (8000c94 <SPI1_IRQHandler+0xbc>)
 8000bec:	f000 fbe8 	bl	80013c0 <HAL_GPIO_WritePin>
 8000bf0:	e043      	b.n	8000c7a <SPI1_IRQHandler+0xa2>
	  }
	  else if(receiveData == 2){
 8000bf2:	4b27      	ldr	r3, [pc, #156]	; (8000c90 <SPI1_IRQHandler+0xb8>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d10c      	bne.n	8000c14 <SPI1_IRQHandler+0x3c>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c00:	4824      	ldr	r0, [pc, #144]	; (8000c94 <SPI1_IRQHandler+0xbc>)
 8000c02:	f000 fbdd 	bl	80013c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 8000c06:	2201      	movs	r2, #1
 8000c08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c0c:	4821      	ldr	r0, [pc, #132]	; (8000c94 <SPI1_IRQHandler+0xbc>)
 8000c0e:	f000 fbd7 	bl	80013c0 <HAL_GPIO_WritePin>
 8000c12:	e032      	b.n	8000c7a <SPI1_IRQHandler+0xa2>
	  }
	  else if(receiveData == 3){
 8000c14:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <SPI1_IRQHandler+0xb8>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b03      	cmp	r3, #3
 8000c1a:	d112      	bne.n	8000c42 <SPI1_IRQHandler+0x6a>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c22:	481c      	ldr	r0, [pc, #112]	; (8000c94 <SPI1_IRQHandler+0xbc>)
 8000c24:	f000 fbcc 	bl	80013c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c2e:	4819      	ldr	r0, [pc, #100]	; (8000c94 <SPI1_IRQHandler+0xbc>)
 8000c30:	f000 fbc6 	bl	80013c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3a:	4816      	ldr	r0, [pc, #88]	; (8000c94 <SPI1_IRQHandler+0xbc>)
 8000c3c:	f000 fbc0 	bl	80013c0 <HAL_GPIO_WritePin>
 8000c40:	e01b      	b.n	8000c7a <SPI1_IRQHandler+0xa2>
	  }
	  else if(receiveData == 4){
 8000c42:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <SPI1_IRQHandler+0xb8>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b04      	cmp	r3, #4
 8000c48:	d117      	bne.n	8000c7a <SPI1_IRQHandler+0xa2>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c50:	4810      	ldr	r0, [pc, #64]	; (8000c94 <SPI1_IRQHandler+0xbc>)
 8000c52:	f000 fbb5 	bl	80013c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 8000c56:	2201      	movs	r2, #1
 8000c58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c5c:	480d      	ldr	r0, [pc, #52]	; (8000c94 <SPI1_IRQHandler+0xbc>)
 8000c5e:	f000 fbaf 	bl	80013c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
 8000c62:	2201      	movs	r2, #1
 8000c64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c68:	480a      	ldr	r0, [pc, #40]	; (8000c94 <SPI1_IRQHandler+0xbc>)
 8000c6a:	f000 fba9 	bl	80013c0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c74:	4807      	ldr	r0, [pc, #28]	; (8000c94 <SPI1_IRQHandler+0xbc>)
 8000c76:	f000 fba3 	bl	80013c0 <HAL_GPIO_WritePin>
	  }
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000c7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <SPI1_IRQHandler+0xbc>)
 8000c80:	f000 fbb7 	bl	80013f2 <HAL_GPIO_TogglePin>
  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000c84:	4804      	ldr	r0, [pc, #16]	; (8000c98 <SPI1_IRQHandler+0xc0>)
 8000c86:	f001 fb2d 	bl	80022e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2000017c 	.word	0x2000017c
 8000c94:	40020c00 	.word	0x40020c00
 8000c98:	2000002c 	.word	0x2000002c

08000c9c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <SPI2_IRQHandler+0x10>)
 8000ca2:	f001 fb1f 	bl	80022e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000084 	.word	0x20000084

08000cb0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <SPI3_IRQHandler+0x10>)
 8000cb6:	f001 fb15 	bl	80022e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200000dc 	.word	0x200000dc

08000cc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <SystemInit+0x20>)
 8000cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cce:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <SystemInit+0x20>)
 8000cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cec:	f7ff ffea 	bl	8000cc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cf0:	480c      	ldr	r0, [pc, #48]	; (8000d24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cf2:	490d      	ldr	r1, [pc, #52]	; (8000d28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cf4:	4a0d      	ldr	r2, [pc, #52]	; (8000d2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf8:	e002      	b.n	8000d00 <LoopCopyDataInit>

08000cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfe:	3304      	adds	r3, #4

08000d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d04:	d3f9      	bcc.n	8000cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d06:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d08:	4c0a      	ldr	r4, [pc, #40]	; (8000d34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d0c:	e001      	b.n	8000d12 <LoopFillZerobss>

08000d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d10:	3204      	adds	r2, #4

08000d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d14:	d3fb      	bcc.n	8000d0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d16:	f002 fb91 	bl	800343c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d1a:	f7ff fbd3 	bl	80004c4 <main>
  bx  lr    
 8000d1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d28:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d2c:	080034bc 	.word	0x080034bc
  ldr r2, =_sbss
 8000d30:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d34:	20000184 	.word	0x20000184

08000d38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d38:	e7fe      	b.n	8000d38 <ADC_IRQHandler>
	...

08000d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_Init+0x40>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a0d      	ldr	r2, [pc, #52]	; (8000d7c <HAL_Init+0x40>)
 8000d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <HAL_Init+0x40>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <HAL_Init+0x40>)
 8000d52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_Init+0x40>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <HAL_Init+0x40>)
 8000d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d64:	2003      	movs	r0, #3
 8000d66:	f000 f92b 	bl	8000fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f000 f808 	bl	8000d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d70:	f7ff fdb8 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40023c00 	.word	0x40023c00

08000d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_InitTick+0x54>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_InitTick+0x58>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4619      	mov	r1, r3
 8000d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f943 	bl	800102a <HAL_SYSTICK_Config>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e00e      	b.n	8000dcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b0f      	cmp	r3, #15
 8000db2:	d80a      	bhi.n	8000dca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db4:	2200      	movs	r2, #0
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	f000 f90b 	bl	8000fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc0:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <HAL_InitTick+0x5c>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e000      	b.n	8000dcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000004 	.word	0x20000004
 8000dd8:	2000000c 	.word	0x2000000c
 8000ddc:	20000008 	.word	0x20000008

08000de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x20>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_IncTick+0x24>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <HAL_IncTick+0x24>)
 8000df2:	6013      	str	r3, [r2, #0]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	2000000c 	.word	0x2000000c
 8000e04:	20000180 	.word	0x20000180

08000e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <HAL_GetTick+0x14>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000180 	.word	0x20000180

08000e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e52:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	60d3      	str	r3, [r2, #12]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <__NVIC_GetPriorityGrouping+0x18>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	0a1b      	lsrs	r3, r3, #8
 8000e72:	f003 0307 	and.w	r3, r3, #7
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	db0b      	blt.n	8000eae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	f003 021f 	and.w	r2, r3, #31
 8000e9c:	4907      	ldr	r1, [pc, #28]	; (8000ebc <__NVIC_EnableIRQ+0x38>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	095b      	lsrs	r3, r3, #5
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000e100 	.word	0xe000e100

08000ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db0a      	blt.n	8000eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	490c      	ldr	r1, [pc, #48]	; (8000f0c <__NVIC_SetPriority+0x4c>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	0112      	lsls	r2, r2, #4
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee8:	e00a      	b.n	8000f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4908      	ldr	r1, [pc, #32]	; (8000f10 <__NVIC_SetPriority+0x50>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	3b04      	subs	r3, #4
 8000ef8:	0112      	lsls	r2, r2, #4
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	440b      	add	r3, r1
 8000efe:	761a      	strb	r2, [r3, #24]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	; 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f1c3 0307 	rsb	r3, r3, #7
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	bf28      	it	cs
 8000f32:	2304      	movcs	r3, #4
 8000f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	2b06      	cmp	r3, #6
 8000f3c:	d902      	bls.n	8000f44 <NVIC_EncodePriority+0x30>
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3b03      	subs	r3, #3
 8000f42:	e000      	b.n	8000f46 <NVIC_EncodePriority+0x32>
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43da      	mvns	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	43d9      	mvns	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	4313      	orrs	r3, r2
         );
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3724      	adds	r7, #36	; 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f8c:	d301      	bcc.n	8000f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00f      	b.n	8000fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <SysTick_Config+0x40>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa0:	f7ff ff8e 	bl	8000ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <SysTick_Config+0x40>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000faa:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <SysTick_Config+0x40>)
 8000fac:	2207      	movs	r2, #7
 8000fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	e000e010 	.word	0xe000e010

08000fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ff29 	bl	8000e20 <__NVIC_SetPriorityGrouping>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b086      	sub	sp, #24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe8:	f7ff ff3e 	bl	8000e68 <__NVIC_GetPriorityGrouping>
 8000fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	68b9      	ldr	r1, [r7, #8]
 8000ff2:	6978      	ldr	r0, [r7, #20]
 8000ff4:	f7ff ff8e 	bl	8000f14 <NVIC_EncodePriority>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff5d 	bl	8000ec0 <__NVIC_SetPriority>
}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff31 	bl	8000e84 <__NVIC_EnableIRQ>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ffa2 	bl	8000f7c <SysTick_Config>
 8001038:	4603      	mov	r3, r0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b02      	cmp	r3, #2
 8001054:	d004      	beq.n	8001060 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2280      	movs	r2, #128	; 0x80
 800105a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e00c      	b.n	800107a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2205      	movs	r2, #5
 8001064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f022 0201 	bic.w	r2, r2, #1
 8001076:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	; 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
 80010a2:	e16b      	b.n	800137c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010a4:	2201      	movs	r2, #1
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	429a      	cmp	r2, r3
 80010be:	f040 815a 	bne.w	8001376 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d005      	beq.n	80010da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d130      	bne.n	800113c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	2203      	movs	r2, #3
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	68da      	ldr	r2, [r3, #12]
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001110:	2201      	movs	r2, #1
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	091b      	lsrs	r3, r3, #4
 8001126:	f003 0201 	and.w	r2, r3, #1
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b03      	cmp	r3, #3
 8001146:	d017      	beq.n	8001178 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d123      	bne.n	80011cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	08da      	lsrs	r2, r3, #3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3208      	adds	r2, #8
 800118c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	f003 0307 	and.w	r3, r3, #7
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	220f      	movs	r2, #15
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	691a      	ldr	r2, [r3, #16]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	08da      	lsrs	r2, r3, #3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3208      	adds	r2, #8
 80011c6:	69b9      	ldr	r1, [r7, #24]
 80011c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	2203      	movs	r2, #3
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0203 	and.w	r2, r3, #3
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001208:	2b00      	cmp	r3, #0
 800120a:	f000 80b4 	beq.w	8001376 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b60      	ldr	r3, [pc, #384]	; (8001394 <HAL_GPIO_Init+0x30c>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	4a5f      	ldr	r2, [pc, #380]	; (8001394 <HAL_GPIO_Init+0x30c>)
 8001218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800121c:	6453      	str	r3, [r2, #68]	; 0x44
 800121e:	4b5d      	ldr	r3, [pc, #372]	; (8001394 <HAL_GPIO_Init+0x30c>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800122a:	4a5b      	ldr	r2, [pc, #364]	; (8001398 <HAL_GPIO_Init+0x310>)
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	3302      	adds	r3, #2
 8001232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	220f      	movs	r2, #15
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a52      	ldr	r2, [pc, #328]	; (800139c <HAL_GPIO_Init+0x314>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d02b      	beq.n	80012ae <HAL_GPIO_Init+0x226>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a51      	ldr	r2, [pc, #324]	; (80013a0 <HAL_GPIO_Init+0x318>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d025      	beq.n	80012aa <HAL_GPIO_Init+0x222>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a50      	ldr	r2, [pc, #320]	; (80013a4 <HAL_GPIO_Init+0x31c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d01f      	beq.n	80012a6 <HAL_GPIO_Init+0x21e>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4f      	ldr	r2, [pc, #316]	; (80013a8 <HAL_GPIO_Init+0x320>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d019      	beq.n	80012a2 <HAL_GPIO_Init+0x21a>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4e      	ldr	r2, [pc, #312]	; (80013ac <HAL_GPIO_Init+0x324>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d013      	beq.n	800129e <HAL_GPIO_Init+0x216>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4d      	ldr	r2, [pc, #308]	; (80013b0 <HAL_GPIO_Init+0x328>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d00d      	beq.n	800129a <HAL_GPIO_Init+0x212>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4c      	ldr	r2, [pc, #304]	; (80013b4 <HAL_GPIO_Init+0x32c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d007      	beq.n	8001296 <HAL_GPIO_Init+0x20e>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4b      	ldr	r2, [pc, #300]	; (80013b8 <HAL_GPIO_Init+0x330>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d101      	bne.n	8001292 <HAL_GPIO_Init+0x20a>
 800128e:	2307      	movs	r3, #7
 8001290:	e00e      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 8001292:	2308      	movs	r3, #8
 8001294:	e00c      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 8001296:	2306      	movs	r3, #6
 8001298:	e00a      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 800129a:	2305      	movs	r3, #5
 800129c:	e008      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 800129e:	2304      	movs	r3, #4
 80012a0:	e006      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 80012a2:	2303      	movs	r3, #3
 80012a4:	e004      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 80012a6:	2302      	movs	r3, #2
 80012a8:	e002      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 80012ae:	2300      	movs	r3, #0
 80012b0:	69fa      	ldr	r2, [r7, #28]
 80012b2:	f002 0203 	and.w	r2, r2, #3
 80012b6:	0092      	lsls	r2, r2, #2
 80012b8:	4093      	lsls	r3, r2
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012c0:	4935      	ldr	r1, [pc, #212]	; (8001398 <HAL_GPIO_Init+0x310>)
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	089b      	lsrs	r3, r3, #2
 80012c6:	3302      	adds	r3, #2
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ce:	4b3b      	ldr	r3, [pc, #236]	; (80013bc <HAL_GPIO_Init+0x334>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012f2:	4a32      	ldr	r2, [pc, #200]	; (80013bc <HAL_GPIO_Init+0x334>)
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f8:	4b30      	ldr	r3, [pc, #192]	; (80013bc <HAL_GPIO_Init+0x334>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800131c:	4a27      	ldr	r2, [pc, #156]	; (80013bc <HAL_GPIO_Init+0x334>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001322:	4b26      	ldr	r3, [pc, #152]	; (80013bc <HAL_GPIO_Init+0x334>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001346:	4a1d      	ldr	r2, [pc, #116]	; (80013bc <HAL_GPIO_Init+0x334>)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800134c:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <HAL_GPIO_Init+0x334>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001370:	4a12      	ldr	r2, [pc, #72]	; (80013bc <HAL_GPIO_Init+0x334>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3301      	adds	r3, #1
 800137a:	61fb      	str	r3, [r7, #28]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	2b0f      	cmp	r3, #15
 8001380:	f67f ae90 	bls.w	80010a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3724      	adds	r7, #36	; 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40013800 	.word	0x40013800
 800139c:	40020000 	.word	0x40020000
 80013a0:	40020400 	.word	0x40020400
 80013a4:	40020800 	.word	0x40020800
 80013a8:	40020c00 	.word	0x40020c00
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40021400 	.word	0x40021400
 80013b4:	40021800 	.word	0x40021800
 80013b8:	40021c00 	.word	0x40021c00
 80013bc:	40013c00 	.word	0x40013c00

080013c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	807b      	strh	r3, [r7, #2]
 80013cc:	4613      	mov	r3, r2
 80013ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d0:	787b      	ldrb	r3, [r7, #1]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013d6:	887a      	ldrh	r2, [r7, #2]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013dc:	e003      	b.n	80013e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013de:	887b      	ldrh	r3, [r7, #2]
 80013e0:	041a      	lsls	r2, r3, #16
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	619a      	str	r2, [r3, #24]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b085      	sub	sp, #20
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	460b      	mov	r3, r1
 80013fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001404:	887a      	ldrh	r2, [r7, #2]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4013      	ands	r3, r2
 800140a:	041a      	lsls	r2, r3, #16
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	43d9      	mvns	r1, r3
 8001410:	887b      	ldrh	r3, [r7, #2]
 8001412:	400b      	ands	r3, r1
 8001414:	431a      	orrs	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	619a      	str	r2, [r3, #24]
}
 800141a:	bf00      	nop
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e267      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	d075      	beq.n	8001532 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001446:	4b88      	ldr	r3, [pc, #544]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	2b04      	cmp	r3, #4
 8001450:	d00c      	beq.n	800146c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001452:	4b85      	ldr	r3, [pc, #532]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800145a:	2b08      	cmp	r3, #8
 800145c:	d112      	bne.n	8001484 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800145e:	4b82      	ldr	r3, [pc, #520]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001466:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800146a:	d10b      	bne.n	8001484 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146c:	4b7e      	ldr	r3, [pc, #504]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d05b      	beq.n	8001530 <HAL_RCC_OscConfig+0x108>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d157      	bne.n	8001530 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e242      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800148c:	d106      	bne.n	800149c <HAL_RCC_OscConfig+0x74>
 800148e:	4b76      	ldr	r3, [pc, #472]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a75      	ldr	r2, [pc, #468]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 8001494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e01d      	b.n	80014d8 <HAL_RCC_OscConfig+0xb0>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014a4:	d10c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x98>
 80014a6:	4b70      	ldr	r3, [pc, #448]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a6f      	ldr	r2, [pc, #444]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80014ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	4b6d      	ldr	r3, [pc, #436]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a6c      	ldr	r2, [pc, #432]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80014b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	e00b      	b.n	80014d8 <HAL_RCC_OscConfig+0xb0>
 80014c0:	4b69      	ldr	r3, [pc, #420]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a68      	ldr	r2, [pc, #416]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80014c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b66      	ldr	r3, [pc, #408]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a65      	ldr	r2, [pc, #404]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80014d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d013      	beq.n	8001508 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e0:	f7ff fc92 	bl	8000e08 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e8:	f7ff fc8e 	bl	8000e08 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b64      	cmp	r3, #100	; 0x64
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e207      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fa:	4b5b      	ldr	r3, [pc, #364]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0xc0>
 8001506:	e014      	b.n	8001532 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001508:	f7ff fc7e 	bl	8000e08 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff fc7a 	bl	8000e08 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b64      	cmp	r3, #100	; 0x64
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e1f3      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001522:	4b51      	ldr	r3, [pc, #324]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0xe8>
 800152e:	e000      	b.n	8001532 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d063      	beq.n	8001606 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800153e:	4b4a      	ldr	r3, [pc, #296]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 030c 	and.w	r3, r3, #12
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00b      	beq.n	8001562 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800154a:	4b47      	ldr	r3, [pc, #284]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001552:	2b08      	cmp	r3, #8
 8001554:	d11c      	bne.n	8001590 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001556:	4b44      	ldr	r3, [pc, #272]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d116      	bne.n	8001590 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001562:	4b41      	ldr	r3, [pc, #260]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d005      	beq.n	800157a <HAL_RCC_OscConfig+0x152>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d001      	beq.n	800157a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e1c7      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157a:	4b3b      	ldr	r3, [pc, #236]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4937      	ldr	r1, [pc, #220]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 800158a:	4313      	orrs	r3, r2
 800158c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158e:	e03a      	b.n	8001606 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d020      	beq.n	80015da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001598:	4b34      	ldr	r3, [pc, #208]	; (800166c <HAL_RCC_OscConfig+0x244>)
 800159a:	2201      	movs	r2, #1
 800159c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159e:	f7ff fc33 	bl	8000e08 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015a6:	f7ff fc2f 	bl	8000e08 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e1a8      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b8:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f0      	beq.n	80015a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c4:	4b28      	ldr	r3, [pc, #160]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4925      	ldr	r1, [pc, #148]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	600b      	str	r3, [r1, #0]
 80015d8:	e015      	b.n	8001606 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015da:	4b24      	ldr	r3, [pc, #144]	; (800166c <HAL_RCC_OscConfig+0x244>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e0:	f7ff fc12 	bl	8000e08 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e8:	f7ff fc0e 	bl	8000e08 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e187      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fa:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	2b00      	cmp	r3, #0
 8001610:	d036      	beq.n	8001680 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d016      	beq.n	8001648 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <HAL_RCC_OscConfig+0x248>)
 800161c:	2201      	movs	r2, #1
 800161e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001620:	f7ff fbf2 	bl	8000e08 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001628:	f7ff fbee 	bl	8000e08 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e167      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 800163c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0x200>
 8001646:	e01b      	b.n	8001680 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_RCC_OscConfig+0x248>)
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164e:	f7ff fbdb 	bl	8000e08 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001654:	e00e      	b.n	8001674 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001656:	f7ff fbd7 	bl	8000e08 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d907      	bls.n	8001674 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e150      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
 8001668:	40023800 	.word	0x40023800
 800166c:	42470000 	.word	0x42470000
 8001670:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001674:	4b88      	ldr	r3, [pc, #544]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1ea      	bne.n	8001656 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 8097 	beq.w	80017bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001692:	4b81      	ldr	r3, [pc, #516]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10f      	bne.n	80016be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	4b7d      	ldr	r3, [pc, #500]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	4a7c      	ldr	r2, [pc, #496]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 80016a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ac:	6413      	str	r3, [r2, #64]	; 0x40
 80016ae:	4b7a      	ldr	r3, [pc, #488]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ba:	2301      	movs	r3, #1
 80016bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016be:	4b77      	ldr	r3, [pc, #476]	; (800189c <HAL_RCC_OscConfig+0x474>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d118      	bne.n	80016fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ca:	4b74      	ldr	r3, [pc, #464]	; (800189c <HAL_RCC_OscConfig+0x474>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a73      	ldr	r2, [pc, #460]	; (800189c <HAL_RCC_OscConfig+0x474>)
 80016d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d6:	f7ff fb97 	bl	8000e08 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016de:	f7ff fb93 	bl	8000e08 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e10c      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f0:	4b6a      	ldr	r3, [pc, #424]	; (800189c <HAL_RCC_OscConfig+0x474>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d106      	bne.n	8001712 <HAL_RCC_OscConfig+0x2ea>
 8001704:	4b64      	ldr	r3, [pc, #400]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001708:	4a63      	ldr	r2, [pc, #396]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	6713      	str	r3, [r2, #112]	; 0x70
 8001710:	e01c      	b.n	800174c <HAL_RCC_OscConfig+0x324>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b05      	cmp	r3, #5
 8001718:	d10c      	bne.n	8001734 <HAL_RCC_OscConfig+0x30c>
 800171a:	4b5f      	ldr	r3, [pc, #380]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 800171c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171e:	4a5e      	ldr	r2, [pc, #376]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001720:	f043 0304 	orr.w	r3, r3, #4
 8001724:	6713      	str	r3, [r2, #112]	; 0x70
 8001726:	4b5c      	ldr	r3, [pc, #368]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172a:	4a5b      	ldr	r2, [pc, #364]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6713      	str	r3, [r2, #112]	; 0x70
 8001732:	e00b      	b.n	800174c <HAL_RCC_OscConfig+0x324>
 8001734:	4b58      	ldr	r3, [pc, #352]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001738:	4a57      	ldr	r2, [pc, #348]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 800173a:	f023 0301 	bic.w	r3, r3, #1
 800173e:	6713      	str	r3, [r2, #112]	; 0x70
 8001740:	4b55      	ldr	r3, [pc, #340]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001744:	4a54      	ldr	r2, [pc, #336]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001746:	f023 0304 	bic.w	r3, r3, #4
 800174a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d015      	beq.n	8001780 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001754:	f7ff fb58 	bl	8000e08 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800175a:	e00a      	b.n	8001772 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800175c:	f7ff fb54 	bl	8000e08 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f241 3288 	movw	r2, #5000	; 0x1388
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e0cb      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001772:	4b49      	ldr	r3, [pc, #292]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0ee      	beq.n	800175c <HAL_RCC_OscConfig+0x334>
 800177e:	e014      	b.n	80017aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001780:	f7ff fb42 	bl	8000e08 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001786:	e00a      	b.n	800179e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001788:	f7ff fb3e 	bl	8000e08 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	f241 3288 	movw	r2, #5000	; 0x1388
 8001796:	4293      	cmp	r3, r2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e0b5      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179e:	4b3e      	ldr	r3, [pc, #248]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 80017a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1ee      	bne.n	8001788 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017aa:	7dfb      	ldrb	r3, [r7, #23]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d105      	bne.n	80017bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b0:	4b39      	ldr	r3, [pc, #228]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	4a38      	ldr	r2, [pc, #224]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 80017b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f000 80a1 	beq.w	8001908 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017c6:	4b34      	ldr	r3, [pc, #208]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	d05c      	beq.n	800188c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d141      	bne.n	800185e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017da:	4b31      	ldr	r3, [pc, #196]	; (80018a0 <HAL_RCC_OscConfig+0x478>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff fb12 	bl	8000e08 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e8:	f7ff fb0e 	bl	8000e08 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e087      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fa:	4b27      	ldr	r3, [pc, #156]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69da      	ldr	r2, [r3, #28]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	019b      	lsls	r3, r3, #6
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181c:	085b      	lsrs	r3, r3, #1
 800181e:	3b01      	subs	r3, #1
 8001820:	041b      	lsls	r3, r3, #16
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001828:	061b      	lsls	r3, r3, #24
 800182a:	491b      	ldr	r1, [pc, #108]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 800182c:	4313      	orrs	r3, r2
 800182e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <HAL_RCC_OscConfig+0x478>)
 8001832:	2201      	movs	r2, #1
 8001834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001836:	f7ff fae7 	bl	8000e08 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800183e:	f7ff fae3 	bl	8000e08 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e05c      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001850:	4b11      	ldr	r3, [pc, #68]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x416>
 800185c:	e054      	b.n	8001908 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <HAL_RCC_OscConfig+0x478>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001864:	f7ff fad0 	bl	8000e08 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800186c:	f7ff facc 	bl	8000e08 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e045      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f0      	bne.n	800186c <HAL_RCC_OscConfig+0x444>
 800188a:	e03d      	b.n	8001908 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d107      	bne.n	80018a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e038      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
 8001898:	40023800 	.word	0x40023800
 800189c:	40007000 	.word	0x40007000
 80018a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018a4:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <HAL_RCC_OscConfig+0x4ec>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d028      	beq.n	8001904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018bc:	429a      	cmp	r2, r3
 80018be:	d121      	bne.n	8001904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d11a      	bne.n	8001904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018d4:	4013      	ands	r3, r2
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018dc:	4293      	cmp	r3, r2
 80018de:	d111      	bne.n	8001904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ea:	085b      	lsrs	r3, r3, #1
 80018ec:	3b01      	subs	r3, #1
 80018ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d107      	bne.n	8001904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001900:	429a      	cmp	r2, r3
 8001902:	d001      	beq.n	8001908 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800

08001918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0cc      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800192c:	4b68      	ldr	r3, [pc, #416]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d90c      	bls.n	8001954 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193a:	4b65      	ldr	r3, [pc, #404]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001942:	4b63      	ldr	r3, [pc, #396]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d001      	beq.n	8001954 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0b8      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d020      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800196c:	4b59      	ldr	r3, [pc, #356]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	4a58      	ldr	r2, [pc, #352]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001976:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001984:	4b53      	ldr	r3, [pc, #332]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	4a52      	ldr	r2, [pc, #328]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800198e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001990:	4b50      	ldr	r3, [pc, #320]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	494d      	ldr	r1, [pc, #308]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d044      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d107      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b6:	4b47      	ldr	r3, [pc, #284]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d119      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e07f      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d003      	beq.n	80019d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d107      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d6:	4b3f      	ldr	r3, [pc, #252]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d109      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e06f      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e6:	4b3b      	ldr	r3, [pc, #236]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e067      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019f6:	4b37      	ldr	r3, [pc, #220]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f023 0203 	bic.w	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	4934      	ldr	r1, [pc, #208]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a08:	f7ff f9fe 	bl	8000e08 <HAL_GetTick>
 8001a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0e:	e00a      	b.n	8001a26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a10:	f7ff f9fa 	bl	8000e08 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e04f      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a26:	4b2b      	ldr	r3, [pc, #172]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 020c 	and.w	r2, r3, #12
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d1eb      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a38:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d20c      	bcs.n	8001a60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a46:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4e:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d001      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e032      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d008      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a6c:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	4916      	ldr	r1, [pc, #88]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d009      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a8a:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	490e      	ldr	r1, [pc, #56]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a9e:	f000 f821 	bl	8001ae4 <HAL_RCC_GetSysClockFreq>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	091b      	lsrs	r3, r3, #4
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	490a      	ldr	r1, [pc, #40]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab0:	5ccb      	ldrb	r3, [r1, r3]
 8001ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab6:	4a09      	ldr	r2, [pc, #36]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff f95e 	bl	8000d80 <HAL_InitTick>

  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023c00 	.word	0x40023c00
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	0800349c 	.word	0x0800349c
 8001adc:	20000004 	.word	0x20000004
 8001ae0:	20000008 	.word	0x20000008

08001ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ae8:	b094      	sub	sp, #80	; 0x50
 8001aea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	647b      	str	r3, [r7, #68]	; 0x44
 8001af0:	2300      	movs	r3, #0
 8001af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001af4:	2300      	movs	r3, #0
 8001af6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001afc:	4b79      	ldr	r3, [pc, #484]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 030c 	and.w	r3, r3, #12
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d00d      	beq.n	8001b24 <HAL_RCC_GetSysClockFreq+0x40>
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	f200 80e1 	bhi.w	8001cd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d002      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0x34>
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d003      	beq.n	8001b1e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b16:	e0db      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b18:	4b73      	ldr	r3, [pc, #460]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b1a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b1c:	e0db      	b.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b1e:	4b73      	ldr	r3, [pc, #460]	; (8001cec <HAL_RCC_GetSysClockFreq+0x208>)
 8001b20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b22:	e0d8      	b.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b24:	4b6f      	ldr	r3, [pc, #444]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b2c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b2e:	4b6d      	ldr	r3, [pc, #436]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d063      	beq.n	8001c02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b3a:	4b6a      	ldr	r3, [pc, #424]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	099b      	lsrs	r3, r3, #6
 8001b40:	2200      	movs	r2, #0
 8001b42:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b4c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b4e:	2300      	movs	r3, #0
 8001b50:	637b      	str	r3, [r7, #52]	; 0x34
 8001b52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b56:	4622      	mov	r2, r4
 8001b58:	462b      	mov	r3, r5
 8001b5a:	f04f 0000 	mov.w	r0, #0
 8001b5e:	f04f 0100 	mov.w	r1, #0
 8001b62:	0159      	lsls	r1, r3, #5
 8001b64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b68:	0150      	lsls	r0, r2, #5
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4621      	mov	r1, r4
 8001b70:	1a51      	subs	r1, r2, r1
 8001b72:	6139      	str	r1, [r7, #16]
 8001b74:	4629      	mov	r1, r5
 8001b76:	eb63 0301 	sbc.w	r3, r3, r1
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b88:	4659      	mov	r1, fp
 8001b8a:	018b      	lsls	r3, r1, #6
 8001b8c:	4651      	mov	r1, sl
 8001b8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b92:	4651      	mov	r1, sl
 8001b94:	018a      	lsls	r2, r1, #6
 8001b96:	4651      	mov	r1, sl
 8001b98:	ebb2 0801 	subs.w	r8, r2, r1
 8001b9c:	4659      	mov	r1, fp
 8001b9e:	eb63 0901 	sbc.w	r9, r3, r1
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bb6:	4690      	mov	r8, r2
 8001bb8:	4699      	mov	r9, r3
 8001bba:	4623      	mov	r3, r4
 8001bbc:	eb18 0303 	adds.w	r3, r8, r3
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	462b      	mov	r3, r5
 8001bc4:	eb49 0303 	adc.w	r3, r9, r3
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bd6:	4629      	mov	r1, r5
 8001bd8:	024b      	lsls	r3, r1, #9
 8001bda:	4621      	mov	r1, r4
 8001bdc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001be0:	4621      	mov	r1, r4
 8001be2:	024a      	lsls	r2, r1, #9
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bea:	2200      	movs	r2, #0
 8001bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bf0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bf4:	f7fe fae8 	bl	80001c8 <__aeabi_uldivmod>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c00:	e058      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c02:	4b38      	ldr	r3, [pc, #224]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	099b      	lsrs	r3, r3, #6
 8001c08:	2200      	movs	r2, #0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c12:	623b      	str	r3, [r7, #32]
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
 8001c18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c1c:	4642      	mov	r2, r8
 8001c1e:	464b      	mov	r3, r9
 8001c20:	f04f 0000 	mov.w	r0, #0
 8001c24:	f04f 0100 	mov.w	r1, #0
 8001c28:	0159      	lsls	r1, r3, #5
 8001c2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c2e:	0150      	lsls	r0, r2, #5
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4641      	mov	r1, r8
 8001c36:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c3a:	4649      	mov	r1, r9
 8001c3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c54:	ebb2 040a 	subs.w	r4, r2, sl
 8001c58:	eb63 050b 	sbc.w	r5, r3, fp
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	00eb      	lsls	r3, r5, #3
 8001c66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c6a:	00e2      	lsls	r2, r4, #3
 8001c6c:	4614      	mov	r4, r2
 8001c6e:	461d      	mov	r5, r3
 8001c70:	4643      	mov	r3, r8
 8001c72:	18e3      	adds	r3, r4, r3
 8001c74:	603b      	str	r3, [r7, #0]
 8001c76:	464b      	mov	r3, r9
 8001c78:	eb45 0303 	adc.w	r3, r5, r3
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c8a:	4629      	mov	r1, r5
 8001c8c:	028b      	lsls	r3, r1, #10
 8001c8e:	4621      	mov	r1, r4
 8001c90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c94:	4621      	mov	r1, r4
 8001c96:	028a      	lsls	r2, r1, #10
 8001c98:	4610      	mov	r0, r2
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
 8001ca2:	61fa      	str	r2, [r7, #28]
 8001ca4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ca8:	f7fe fa8e 	bl	80001c8 <__aeabi_uldivmod>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	0c1b      	lsrs	r3, r3, #16
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001cc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ccc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cce:	e002      	b.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cd2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3750      	adds	r7, #80	; 0x50
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	00f42400 	.word	0x00f42400
 8001cec:	007a1200 	.word	0x007a1200

08001cf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e07b      	b.n	8001dfa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d108      	bne.n	8001d1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d12:	d009      	beq.n	8001d28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	61da      	str	r2, [r3, #28]
 8001d1a:	e005      	b.n	8001d28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d106      	bne.n	8001d48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7fe fdf6 	bl	8000934 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001d70:	431a      	orrs	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	431a      	orrs	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dac:	ea42 0103 	orr.w	r1, r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	0c1b      	lsrs	r3, r3, #16
 8001dc6:	f003 0104 	and.w	r1, r3, #4
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	f003 0210 	and.w	r2, r3, #16
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	69da      	ldr	r2, [r3, #28]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001de8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b088      	sub	sp, #32
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	603b      	str	r3, [r7, #0]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_SPI_Transmit+0x22>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e12d      	b.n	8002080 <HAL_SPI_Transmit+0x27e>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e2c:	f7fe ffec 	bl	8000e08 <HAL_GetTick>
 8001e30:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001e32:	88fb      	ldrh	r3, [r7, #6]
 8001e34:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d002      	beq.n	8001e48 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001e42:	2302      	movs	r3, #2
 8001e44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e46:	e116      	b.n	8002076 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <HAL_SPI_Transmit+0x52>
 8001e4e:	88fb      	ldrh	r3, [r7, #6]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e58:	e10d      	b.n	8002076 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	88fa      	ldrh	r2, [r7, #6]
 8001e72:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	88fa      	ldrh	r2, [r7, #6]
 8001e78:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ea0:	d10f      	bne.n	8001ec2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eb0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ec0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ecc:	2b40      	cmp	r3, #64	; 0x40
 8001ece:	d007      	beq.n	8001ee0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ede:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ee8:	d14f      	bne.n	8001f8a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d002      	beq.n	8001ef8 <HAL_SPI_Transmit+0xf6>
 8001ef2:	8afb      	ldrh	r3, [r7, #22]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d142      	bne.n	8001f7e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	881a      	ldrh	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	1c9a      	adds	r2, r3, #2
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f1c:	e02f      	b.n	8001f7e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d112      	bne.n	8001f52 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f30:	881a      	ldrh	r2, [r3, #0]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	1c9a      	adds	r2, r3, #2
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f50:	e015      	b.n	8001f7e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f52:	f7fe ff59 	bl	8000e08 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d803      	bhi.n	8001f6a <HAL_SPI_Transmit+0x168>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f68:	d102      	bne.n	8001f70 <HAL_SPI_Transmit+0x16e>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d106      	bne.n	8001f7e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001f7c:	e07b      	b.n	8002076 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1ca      	bne.n	8001f1e <HAL_SPI_Transmit+0x11c>
 8001f88:	e050      	b.n	800202c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d002      	beq.n	8001f98 <HAL_SPI_Transmit+0x196>
 8001f92:	8afb      	ldrh	r3, [r7, #22]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d144      	bne.n	8002022 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	330c      	adds	r3, #12
 8001fa2:	7812      	ldrb	r2, [r2, #0]
 8001fa4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001fbe:	e030      	b.n	8002022 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d113      	bne.n	8001ff6 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	330c      	adds	r3, #12
 8001fd8:	7812      	ldrb	r2, [r2, #0]
 8001fda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ff4:	e015      	b.n	8002022 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ff6:	f7fe ff07 	bl	8000e08 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d803      	bhi.n	800200e <HAL_SPI_Transmit+0x20c>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800200c:	d102      	bne.n	8002014 <HAL_SPI_Transmit+0x212>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d106      	bne.n	8002022 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002020:	e029      	b.n	8002076 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002026:	b29b      	uxth	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1c9      	bne.n	8001fc0 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	6839      	ldr	r1, [r7, #0]
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 fc75 	bl	8002920 <SPI_EndRxTxTransaction>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d002      	beq.n	8002042 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2220      	movs	r2, #32
 8002040:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10a      	bne.n	8002060 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	613b      	str	r3, [r7, #16]
 800205e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	77fb      	strb	r3, [r7, #31]
 800206c:	e003      	b.n	8002076 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800207e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3720      	adds	r7, #32
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	4613      	mov	r3, r2
 8002094:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d002      	beq.n	80020ac <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 80020a6:	2302      	movs	r3, #2
 80020a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80020aa:	e07f      	b.n	80021ac <HAL_SPI_Receive_IT+0x124>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d110      	bne.n	80020d6 <HAL_SPI_Receive_IT+0x4e>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020bc:	d10b      	bne.n	80020d6 <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2204      	movs	r2, #4
 80020c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80020c6:	88fb      	ldrh	r3, [r7, #6]
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	68b9      	ldr	r1, [r7, #8]
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 f877 	bl	80021c0 <HAL_SPI_TransmitReceive_IT>
 80020d2:	4603      	mov	r3, r0
 80020d4:	e06b      	b.n	80021ae <HAL_SPI_Receive_IT+0x126>
  }


  if ((pData == NULL) || (Size == 0U))
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d002      	beq.n	80020e2 <HAL_SPI_Receive_IT+0x5a>
 80020dc:	88fb      	ldrh	r3, [r7, #6]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d102      	bne.n	80020e8 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80020e6:	e061      	b.n	80021ac <HAL_SPI_Receive_IT+0x124>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_SPI_Receive_IT+0x6e>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e05b      	b.n	80021ae <HAL_SPI_Receive_IT+0x126>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2204      	movs	r2, #4
 8002102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	88fa      	ldrh	r2, [r7, #6]
 8002116:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	88fa      	ldrh	r2, [r7, #6]
 800211c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4a1d      	ldr	r2, [pc, #116]	; (80021b8 <HAL_SPI_Receive_IT+0x130>)
 8002142:	641a      	str	r2, [r3, #64]	; 0x40
 8002144:	e002      	b.n	800214c <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4a1c      	ldr	r2, [pc, #112]	; (80021bc <HAL_SPI_Receive_IT+0x134>)
 800214a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002154:	d10f      	bne.n	8002176 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002164:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002174:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002180:	2b40      	cmp	r3, #64	; 0x40
 8002182:	d007      	beq.n	8002194 <HAL_SPI_Receive_IT+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002192:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80021aa:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80021ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	080026fd 	.word	0x080026fd
 80021bc:	080026b3 	.word	0x080026b3

080021c0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b087      	sub	sp, #28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
 80021cc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021d8:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80021e0:	7dbb      	ldrb	r3, [r7, #22]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d00d      	beq.n	8002202 <HAL_SPI_TransmitReceive_IT+0x42>
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021ec:	d106      	bne.n	80021fc <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d102      	bne.n	80021fc <HAL_SPI_TransmitReceive_IT+0x3c>
 80021f6:	7dbb      	ldrb	r3, [r7, #22]
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d002      	beq.n	8002202 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 80021fc:	2302      	movs	r3, #2
 80021fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002200:	e061      	b.n	80022c6 <HAL_SPI_TransmitReceive_IT+0x106>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_SPI_TransmitReceive_IT+0x54>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <HAL_SPI_TransmitReceive_IT+0x54>
 800220e:	887b      	ldrh	r3, [r7, #2]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002218:	e055      	b.n	80022c6 <HAL_SPI_TransmitReceive_IT+0x106>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_SPI_TransmitReceive_IT+0x68>
 8002224:	2302      	movs	r3, #2
 8002226:	e04f      	b.n	80022c8 <HAL_SPI_TransmitReceive_IT+0x108>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b04      	cmp	r3, #4
 800223a:	d003      	beq.n	8002244 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2205      	movs	r2, #5
 8002240:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	887a      	ldrh	r2, [r7, #2]
 8002254:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	887a      	ldrh	r2, [r7, #2]
 800225a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	887a      	ldrh	r2, [r7, #2]
 8002266:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	887a      	ldrh	r2, [r7, #2]
 800226c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d006      	beq.n	8002284 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4a16      	ldr	r2, [pc, #88]	; (80022d4 <HAL_SPI_TransmitReceive_IT+0x114>)
 800227a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4a16      	ldr	r2, [pc, #88]	; (80022d8 <HAL_SPI_TransmitReceive_IT+0x118>)
 8002280:	645a      	str	r2, [r3, #68]	; 0x44
 8002282:	e005      	b.n	8002290 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4a15      	ldr	r2, [pc, #84]	; (80022dc <HAL_SPI_TransmitReceive_IT+0x11c>)
 8002288:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4a14      	ldr	r2, [pc, #80]	; (80022e0 <HAL_SPI_TransmitReceive_IT+0x120>)
 800228e:	645a      	str	r2, [r3, #68]	; 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229a:	2b40      	cmp	r3, #64	; 0x40
 800229c:	d007      	beq.n	80022ae <HAL_SPI_TransmitReceive_IT+0xee>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022ac:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80022c4:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80022c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	371c      	adds	r7, #28
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	080025f5 	.word	0x080025f5
 80022d8:	08002655 	.word	0x08002655
 80022dc:	08002531 	.word	0x08002531
 80022e0:	08002595 	.word	0x08002595

080022e4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10e      	bne.n	8002324 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800230c:	2b00      	cmp	r3, #0
 800230e:	d009      	beq.n	8002324 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002316:	2b00      	cmp	r3, #0
 8002318:	d004      	beq.n	8002324 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	4798      	blx	r3
    return;
 8002322:	e0ce      	b.n	80024c2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d009      	beq.n	8002342 <HAL_SPI_IRQHandler+0x5e>
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002334:	2b00      	cmp	r3, #0
 8002336:	d004      	beq.n	8002342 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	4798      	blx	r3
    return;
 8002340:	e0bf      	b.n	80024c2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	f003 0320 	and.w	r3, r3, #32
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10a      	bne.n	8002362 <HAL_SPI_IRQHandler+0x7e>
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002352:	2b00      	cmp	r3, #0
 8002354:	d105      	bne.n	8002362 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80b0 	beq.w	80024c2 <HAL_SPI_IRQHandler+0x1de>
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	f003 0320 	and.w	r3, r3, #32
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 80aa 	beq.w	80024c2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002374:	2b00      	cmp	r3, #0
 8002376:	d023      	beq.n	80023c0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b03      	cmp	r3, #3
 8002382:	d011      	beq.n	80023a8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002388:	f043 0204 	orr.w	r2, r3, #4
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	e00b      	b.n	80023c0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023a8:	2300      	movs	r3, #0
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	613b      	str	r3, [r7, #16]
 80023bc:	693b      	ldr	r3, [r7, #16]
        return;
 80023be:	e080      	b.n	80024c2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	f003 0320 	and.w	r3, r3, #32
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d014      	beq.n	80023f4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ce:	f043 0201 	orr.w	r2, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00c      	beq.n	8002418 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002402:	f043 0208 	orr.w	r2, r3, #8
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241c:	2b00      	cmp	r3, #0
 800241e:	d04f      	beq.n	80024c0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800242e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d104      	bne.n	800244c <HAL_SPI_IRQHandler+0x168>
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d034      	beq.n	80024b6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0203 	bic.w	r2, r2, #3
 800245a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002460:	2b00      	cmp	r3, #0
 8002462:	d011      	beq.n	8002488 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002468:	4a17      	ldr	r2, [pc, #92]	; (80024c8 <HAL_SPI_IRQHandler+0x1e4>)
 800246a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe fde6 	bl	8001042 <HAL_DMA_Abort_IT>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002480:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800248c:	2b00      	cmp	r3, #0
 800248e:	d016      	beq.n	80024be <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002494:	4a0c      	ldr	r2, [pc, #48]	; (80024c8 <HAL_SPI_IRQHandler+0x1e4>)
 8002496:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe fdd0 	bl	8001042 <HAL_DMA_Abort_IT>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00a      	beq.n	80024be <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80024b4:	e003      	b.n	80024be <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f81c 	bl	80024f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80024bc:	e000      	b.n	80024c0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80024be:	bf00      	nop
    return;
 80024c0:	bf00      	nop
  }
}
 80024c2:	3720      	adds	r7, #32
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	08002509 	.word	0x08002509

080024cc <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002514:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f7ff ffe6 	bl	80024f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f103 020c 	add.w	r2, r3, #12
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002544:	7812      	ldrb	r2, [r2, #0]
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002558:	b29b      	uxth	r3, r3
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002566:	b29b      	uxth	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10f      	bne.n	800258c <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800257a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002580:	b29b      	uxth	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d102      	bne.n	800258c <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 fa1e 	bl	80029c8 <SPI_CloseRxTx_ISR>
    }
  }
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	330c      	adds	r3, #12
 80025a6:	7812      	ldrb	r2, [r2, #0]
 80025a8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	3b01      	subs	r3, #1
 80025bc:	b29a      	uxth	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10f      	bne.n	80025ec <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025da:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d102      	bne.n	80025ec <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f9ee 	bl	80029c8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80025ec:	bf00      	nop
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002606:	b292      	uxth	r2, r2
 8002608:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260e:	1c9a      	adds	r2, r3, #2
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002618:	b29b      	uxth	r3, r3
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002626:	b29b      	uxth	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10f      	bne.n	800264c <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800263a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002640:	b29b      	uxth	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d102      	bne.n	800264c <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f9be 	bl	80029c8 <SPI_CloseRxTx_ISR>
    }
  }
}
 800264c:	bf00      	nop
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002660:	881a      	ldrh	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	1c9a      	adds	r2, r3, #2
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002676:	b29b      	uxth	r3, r3
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002684:	b29b      	uxth	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10f      	bne.n	80026aa <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002698:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800269e:	b29b      	uxth	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d102      	bne.n	80026aa <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f98f 	bl	80029c8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f103 020c 	add.w	r2, r3, #12
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c6:	7812      	ldrb	r2, [r2, #0]
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026da:	b29b      	uxth	r3, r3
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d102      	bne.n	80026f4 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f9de 	bl	8002ab0 <SPI_CloseRx_ISR>
  }
}
 80026f4:	bf00      	nop
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	b292      	uxth	r2, r2
 8002710:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002716:	1c9a      	adds	r2, r3, #2
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002720:	b29b      	uxth	r3, r3
 8002722:	3b01      	subs	r3, #1
 8002724:	b29a      	uxth	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800272e:	b29b      	uxth	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d102      	bne.n	800273a <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f9bb 	bl	8002ab0 <SPI_CloseRx_ISR>
  }
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	4613      	mov	r3, r2
 8002752:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002754:	f7fe fb58 	bl	8000e08 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275c:	1a9b      	subs	r3, r3, r2
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	4413      	add	r3, r2
 8002762:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002764:	f7fe fb50 	bl	8000e08 <HAL_GetTick>
 8002768:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800276a:	4b39      	ldr	r3, [pc, #228]	; (8002850 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	015b      	lsls	r3, r3, #5
 8002770:	0d1b      	lsrs	r3, r3, #20
 8002772:	69fa      	ldr	r2, [r7, #28]
 8002774:	fb02 f303 	mul.w	r3, r2, r3
 8002778:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800277a:	e054      	b.n	8002826 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002782:	d050      	beq.n	8002826 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002784:	f7fe fb40 	bl	8000e08 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	69fa      	ldr	r2, [r7, #28]
 8002790:	429a      	cmp	r2, r3
 8002792:	d902      	bls.n	800279a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d13d      	bne.n	8002816 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80027a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027b2:	d111      	bne.n	80027d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027bc:	d004      	beq.n	80027c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027c6:	d107      	bne.n	80027d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027e0:	d10f      	bne.n	8002802 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002800:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e017      	b.n	8002846 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	3b01      	subs	r3, #1
 8002824:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	4013      	ands	r3, r2
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	429a      	cmp	r2, r3
 8002834:	bf0c      	ite	eq
 8002836:	2301      	moveq	r3, #1
 8002838:	2300      	movne	r3, #0
 800283a:	b2db      	uxtb	r3, r3
 800283c:	461a      	mov	r2, r3
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	429a      	cmp	r2, r3
 8002842:	d19b      	bne.n	800277c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3720      	adds	r7, #32
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000004 	.word	0x20000004

08002854 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af02      	add	r7, sp, #8
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002868:	d111      	bne.n	800288e <SPI_EndRxTransaction+0x3a>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002872:	d004      	beq.n	800287e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800287c:	d107      	bne.n	800288e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800288c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002896:	d12a      	bne.n	80028ee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a0:	d012      	beq.n	80028c8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2200      	movs	r2, #0
 80028aa:	2180      	movs	r1, #128	; 0x80
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f7ff ff49 	bl	8002744 <SPI_WaitFlagStateUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d02d      	beq.n	8002914 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028bc:	f043 0220 	orr.w	r2, r3, #32
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e026      	b.n	8002916 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2200      	movs	r2, #0
 80028d0:	2101      	movs	r1, #1
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f7ff ff36 	bl	8002744 <SPI_WaitFlagStateUntilTimeout>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d01a      	beq.n	8002914 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e2:	f043 0220 	orr.w	r2, r3, #32
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e013      	b.n	8002916 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2200      	movs	r2, #0
 80028f6:	2101      	movs	r1, #1
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f7ff ff23 	bl	8002744 <SPI_WaitFlagStateUntilTimeout>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d007      	beq.n	8002914 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002908:	f043 0220 	orr.w	r2, r3, #32
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e000      	b.n	8002916 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af02      	add	r7, sp, #8
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2201      	movs	r2, #1
 8002934:	2102      	movs	r1, #2
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f7ff ff04 	bl	8002744 <SPI_WaitFlagStateUntilTimeout>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d007      	beq.n	8002952 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002946:	f043 0220 	orr.w	r2, r3, #32
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e032      	b.n	80029b8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002952:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <SPI_EndRxTxTransaction+0xa0>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a1b      	ldr	r2, [pc, #108]	; (80029c4 <SPI_EndRxTxTransaction+0xa4>)
 8002958:	fba2 2303 	umull	r2, r3, r2, r3
 800295c:	0d5b      	lsrs	r3, r3, #21
 800295e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002962:	fb02 f303 	mul.w	r3, r2, r3
 8002966:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002970:	d112      	bne.n	8002998 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2200      	movs	r2, #0
 800297a:	2180      	movs	r1, #128	; 0x80
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f7ff fee1 	bl	8002744 <SPI_WaitFlagStateUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d016      	beq.n	80029b6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298c:	f043 0220 	orr.w	r2, r3, #32
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e00f      	b.n	80029b8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00a      	beq.n	80029b4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	3b01      	subs	r3, #1
 80029a2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ae:	2b80      	cmp	r3, #128	; 0x80
 80029b0:	d0f2      	beq.n	8002998 <SPI_EndRxTxTransaction+0x78>
 80029b2:	e000      	b.n	80029b6 <SPI_EndRxTxTransaction+0x96>
        break;
 80029b4:	bf00      	nop
  }

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20000004 	.word	0x20000004
 80029c4:	165e9f81 	.word	0x165e9f81

080029c8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80029d0:	4b35      	ldr	r3, [pc, #212]	; (8002aa8 <SPI_CloseRxTx_ISR+0xe0>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a35      	ldr	r2, [pc, #212]	; (8002aac <SPI_CloseRxTx_ISR+0xe4>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	0a5b      	lsrs	r3, r3, #9
 80029dc:	2264      	movs	r2, #100	; 0x64
 80029de:	fb02 f303 	mul.w	r3, r2, r3
 80029e2:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029e4:	f7fe fa10 	bl	8000e08 <HAL_GetTick>
 80029e8:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0220 	bic.w	r2, r2, #32
 80029f8:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d106      	bne.n	8002a0e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a04:	f043 0220 	orr.w	r2, r3, #32
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002a0c:	e009      	b.n	8002a22 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	3b01      	subs	r3, #1
 8002a12:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0eb      	beq.n	80029fa <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	2164      	movs	r1, #100	; 0x64
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff ff7a 	bl	8002920 <SPI_EndRxTxTransaction>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d005      	beq.n	8002a3e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a36:	f043 0220 	orr.w	r2, r3, #32
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10a      	bne.n	8002a5c <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d115      	bne.n	8002a90 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d107      	bne.n	8002a80 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7ff fd27 	bl	80024cc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002a7e:	e00e      	b.n	8002a9e <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff fd29 	bl	80024e0 <HAL_SPI_TxRxCpltCallback>
}
 8002a8e:	e006      	b.n	8002a9e <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff fd2b 	bl	80024f4 <HAL_SPI_ErrorCallback>
}
 8002a9e:	bf00      	nop
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000004 	.word	0x20000004
 8002aac:	057619f1 	.word	0x057619f1

08002ab0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ac6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8002ac8:	f7fe f99e 	bl	8000e08 <HAL_GetTick>
 8002acc:	4603      	mov	r3, r0
 8002ace:	461a      	mov	r2, r3
 8002ad0:	2164      	movs	r1, #100	; 0x64
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff febe 	bl	8002854 <SPI_EndRxTransaction>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d005      	beq.n	8002aea <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae2:	f043 0220 	orr.w	r2, r3, #32
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10a      	bne.n	8002b08 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d103      	bne.n	8002b20 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff fcd7 	bl	80024cc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002b1e:	e002      	b.n	8002b26 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7ff fce7 	bl	80024f4 <HAL_SPI_ErrorCallback>
}
 8002b26:	bf00      	nop
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b082      	sub	sp, #8
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e041      	b.n	8002bc4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d106      	bne.n	8002b5a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7fd ffc1 	bl	8000adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	f000 fa87 	bl	8003080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d001      	beq.n	8002be4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e04e      	b.n	8002c82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a23      	ldr	r2, [pc, #140]	; (8002c90 <HAL_TIM_Base_Start_IT+0xc4>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d022      	beq.n	8002c4c <HAL_TIM_Base_Start_IT+0x80>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0e:	d01d      	beq.n	8002c4c <HAL_TIM_Base_Start_IT+0x80>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a1f      	ldr	r2, [pc, #124]	; (8002c94 <HAL_TIM_Base_Start_IT+0xc8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d018      	beq.n	8002c4c <HAL_TIM_Base_Start_IT+0x80>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a1e      	ldr	r2, [pc, #120]	; (8002c98 <HAL_TIM_Base_Start_IT+0xcc>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d013      	beq.n	8002c4c <HAL_TIM_Base_Start_IT+0x80>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a1c      	ldr	r2, [pc, #112]	; (8002c9c <HAL_TIM_Base_Start_IT+0xd0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d00e      	beq.n	8002c4c <HAL_TIM_Base_Start_IT+0x80>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a1b      	ldr	r2, [pc, #108]	; (8002ca0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d009      	beq.n	8002c4c <HAL_TIM_Base_Start_IT+0x80>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a19      	ldr	r2, [pc, #100]	; (8002ca4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d004      	beq.n	8002c4c <HAL_TIM_Base_Start_IT+0x80>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a18      	ldr	r2, [pc, #96]	; (8002ca8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d111      	bne.n	8002c70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2b06      	cmp	r3, #6
 8002c5c:	d010      	beq.n	8002c80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f042 0201 	orr.w	r2, r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c6e:	e007      	b.n	8002c80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40010000 	.word	0x40010000
 8002c94:	40000400 	.word	0x40000400
 8002c98:	40000800 	.word	0x40000800
 8002c9c:	40000c00 	.word	0x40000c00
 8002ca0:	40010400 	.word	0x40010400
 8002ca4:	40014000 	.word	0x40014000
 8002ca8:	40001800 	.word	0x40001800

08002cac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d020      	beq.n	8002d10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d01b      	beq.n	8002d10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0202 	mvn.w	r2, #2
 8002ce0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f9a3 	bl	8003042 <HAL_TIM_IC_CaptureCallback>
 8002cfc:	e005      	b.n	8002d0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f995 	bl	800302e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f9a6 	bl	8003056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d020      	beq.n	8002d5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d01b      	beq.n	8002d5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f06f 0204 	mvn.w	r2, #4
 8002d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2202      	movs	r2, #2
 8002d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f97d 	bl	8003042 <HAL_TIM_IC_CaptureCallback>
 8002d48:	e005      	b.n	8002d56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f96f 	bl	800302e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f980 	bl	8003056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d020      	beq.n	8002da8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d01b      	beq.n	8002da8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f06f 0208 	mvn.w	r2, #8
 8002d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f957 	bl	8003042 <HAL_TIM_IC_CaptureCallback>
 8002d94:	e005      	b.n	8002da2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f949 	bl	800302e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f95a 	bl	8003056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f003 0310 	and.w	r3, r3, #16
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d020      	beq.n	8002df4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d01b      	beq.n	8002df4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f06f 0210 	mvn.w	r2, #16
 8002dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2208      	movs	r2, #8
 8002dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f931 	bl	8003042 <HAL_TIM_IC_CaptureCallback>
 8002de0:	e005      	b.n	8002dee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f923 	bl	800302e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f934 	bl	8003056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00c      	beq.n	8002e18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d007      	beq.n	8002e18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0201 	mvn.w	r2, #1
 8002e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f901 	bl	800301a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00c      	beq.n	8002e3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d007      	beq.n	8002e3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 faee 	bl	8003418 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00c      	beq.n	8002e60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d007      	beq.n	8002e60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f905 	bl	800306a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f003 0320 	and.w	r3, r3, #32
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00c      	beq.n	8002e84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f003 0320 	and.w	r3, r3, #32
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d007      	beq.n	8002e84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f06f 0220 	mvn.w	r2, #32
 8002e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 fac0 	bl	8003404 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e84:	bf00      	nop
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <HAL_TIM_ConfigClockSource+0x1c>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	e0b4      	b.n	8003012 <HAL_TIM_ConfigClockSource+0x186>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ece:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee0:	d03e      	beq.n	8002f60 <HAL_TIM_ConfigClockSource+0xd4>
 8002ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee6:	f200 8087 	bhi.w	8002ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8002eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eee:	f000 8086 	beq.w	8002ffe <HAL_TIM_ConfigClockSource+0x172>
 8002ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef6:	d87f      	bhi.n	8002ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef8:	2b70      	cmp	r3, #112	; 0x70
 8002efa:	d01a      	beq.n	8002f32 <HAL_TIM_ConfigClockSource+0xa6>
 8002efc:	2b70      	cmp	r3, #112	; 0x70
 8002efe:	d87b      	bhi.n	8002ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8002f00:	2b60      	cmp	r3, #96	; 0x60
 8002f02:	d050      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0x11a>
 8002f04:	2b60      	cmp	r3, #96	; 0x60
 8002f06:	d877      	bhi.n	8002ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8002f08:	2b50      	cmp	r3, #80	; 0x50
 8002f0a:	d03c      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0xfa>
 8002f0c:	2b50      	cmp	r3, #80	; 0x50
 8002f0e:	d873      	bhi.n	8002ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8002f10:	2b40      	cmp	r3, #64	; 0x40
 8002f12:	d058      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0x13a>
 8002f14:	2b40      	cmp	r3, #64	; 0x40
 8002f16:	d86f      	bhi.n	8002ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8002f18:	2b30      	cmp	r3, #48	; 0x30
 8002f1a:	d064      	beq.n	8002fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8002f1c:	2b30      	cmp	r3, #48	; 0x30
 8002f1e:	d86b      	bhi.n	8002ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8002f20:	2b20      	cmp	r3, #32
 8002f22:	d060      	beq.n	8002fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8002f24:	2b20      	cmp	r3, #32
 8002f26:	d867      	bhi.n	8002ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d05c      	beq.n	8002fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8002f2c:	2b10      	cmp	r3, #16
 8002f2e:	d05a      	beq.n	8002fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8002f30:	e062      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f42:	f000 f9c3 	bl	80032cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	609a      	str	r2, [r3, #8]
      break;
 8002f5e:	e04f      	b.n	8003000 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f70:	f000 f9ac 	bl	80032cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f82:	609a      	str	r2, [r3, #8]
      break;
 8002f84:	e03c      	b.n	8003000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f92:	461a      	mov	r2, r3
 8002f94:	f000 f920 	bl	80031d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2150      	movs	r1, #80	; 0x50
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f979 	bl	8003296 <TIM_ITRx_SetConfig>
      break;
 8002fa4:	e02c      	b.n	8003000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	f000 f93f 	bl	8003236 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2160      	movs	r1, #96	; 0x60
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 f969 	bl	8003296 <TIM_ITRx_SetConfig>
      break;
 8002fc4:	e01c      	b.n	8003000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	f000 f900 	bl	80031d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2140      	movs	r1, #64	; 0x40
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 f959 	bl	8003296 <TIM_ITRx_SetConfig>
      break;
 8002fe4:	e00c      	b.n	8003000 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	f000 f950 	bl	8003296 <TIM_ITRx_SetConfig>
      break;
 8002ff6:	e003      	b.n	8003000 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8002ffc:	e000      	b.n	8003000 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ffe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003010:	7bfb      	ldrb	r3, [r7, #15]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
	...

08003080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a46      	ldr	r2, [pc, #280]	; (80031ac <TIM_Base_SetConfig+0x12c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d013      	beq.n	80030c0 <TIM_Base_SetConfig+0x40>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800309e:	d00f      	beq.n	80030c0 <TIM_Base_SetConfig+0x40>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a43      	ldr	r2, [pc, #268]	; (80031b0 <TIM_Base_SetConfig+0x130>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d00b      	beq.n	80030c0 <TIM_Base_SetConfig+0x40>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a42      	ldr	r2, [pc, #264]	; (80031b4 <TIM_Base_SetConfig+0x134>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d007      	beq.n	80030c0 <TIM_Base_SetConfig+0x40>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a41      	ldr	r2, [pc, #260]	; (80031b8 <TIM_Base_SetConfig+0x138>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d003      	beq.n	80030c0 <TIM_Base_SetConfig+0x40>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a40      	ldr	r2, [pc, #256]	; (80031bc <TIM_Base_SetConfig+0x13c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d108      	bne.n	80030d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a35      	ldr	r2, [pc, #212]	; (80031ac <TIM_Base_SetConfig+0x12c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d02b      	beq.n	8003132 <TIM_Base_SetConfig+0xb2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e0:	d027      	beq.n	8003132 <TIM_Base_SetConfig+0xb2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a32      	ldr	r2, [pc, #200]	; (80031b0 <TIM_Base_SetConfig+0x130>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d023      	beq.n	8003132 <TIM_Base_SetConfig+0xb2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a31      	ldr	r2, [pc, #196]	; (80031b4 <TIM_Base_SetConfig+0x134>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d01f      	beq.n	8003132 <TIM_Base_SetConfig+0xb2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a30      	ldr	r2, [pc, #192]	; (80031b8 <TIM_Base_SetConfig+0x138>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d01b      	beq.n	8003132 <TIM_Base_SetConfig+0xb2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a2f      	ldr	r2, [pc, #188]	; (80031bc <TIM_Base_SetConfig+0x13c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d017      	beq.n	8003132 <TIM_Base_SetConfig+0xb2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a2e      	ldr	r2, [pc, #184]	; (80031c0 <TIM_Base_SetConfig+0x140>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d013      	beq.n	8003132 <TIM_Base_SetConfig+0xb2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a2d      	ldr	r2, [pc, #180]	; (80031c4 <TIM_Base_SetConfig+0x144>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d00f      	beq.n	8003132 <TIM_Base_SetConfig+0xb2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a2c      	ldr	r2, [pc, #176]	; (80031c8 <TIM_Base_SetConfig+0x148>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d00b      	beq.n	8003132 <TIM_Base_SetConfig+0xb2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a2b      	ldr	r2, [pc, #172]	; (80031cc <TIM_Base_SetConfig+0x14c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d007      	beq.n	8003132 <TIM_Base_SetConfig+0xb2>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a2a      	ldr	r2, [pc, #168]	; (80031d0 <TIM_Base_SetConfig+0x150>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d003      	beq.n	8003132 <TIM_Base_SetConfig+0xb2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a29      	ldr	r2, [pc, #164]	; (80031d4 <TIM_Base_SetConfig+0x154>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d108      	bne.n	8003144 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003138:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4313      	orrs	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	4313      	orrs	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a10      	ldr	r2, [pc, #64]	; (80031ac <TIM_Base_SetConfig+0x12c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d003      	beq.n	8003178 <TIM_Base_SetConfig+0xf8>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a12      	ldr	r2, [pc, #72]	; (80031bc <TIM_Base_SetConfig+0x13c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d103      	bne.n	8003180 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b01      	cmp	r3, #1
 8003190:	d105      	bne.n	800319e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f023 0201 	bic.w	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	611a      	str	r2, [r3, #16]
  }
}
 800319e:	bf00      	nop
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	40010000 	.word	0x40010000
 80031b0:	40000400 	.word	0x40000400
 80031b4:	40000800 	.word	0x40000800
 80031b8:	40000c00 	.word	0x40000c00
 80031bc:	40010400 	.word	0x40010400
 80031c0:	40014000 	.word	0x40014000
 80031c4:	40014400 	.word	0x40014400
 80031c8:	40014800 	.word	0x40014800
 80031cc:	40001800 	.word	0x40001800
 80031d0:	40001c00 	.word	0x40001c00
 80031d4:	40002000 	.word	0x40002000

080031d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	f023 0201 	bic.w	r2, r3, #1
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003202:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f023 030a 	bic.w	r3, r3, #10
 8003214:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	4313      	orrs	r3, r2
 800321c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	621a      	str	r2, [r3, #32]
}
 800322a:	bf00      	nop
 800322c:	371c      	adds	r7, #28
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003236:	b480      	push	{r7}
 8003238:	b087      	sub	sp, #28
 800323a:	af00      	add	r7, sp, #0
 800323c:	60f8      	str	r0, [r7, #12]
 800323e:	60b9      	str	r1, [r7, #8]
 8003240:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	f023 0210 	bic.w	r2, r3, #16
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003260:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	031b      	lsls	r3, r3, #12
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003272:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	621a      	str	r2, [r3, #32]
}
 800328a:	bf00      	nop
 800328c:	371c      	adds	r7, #28
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003296:	b480      	push	{r7}
 8003298:	b085      	sub	sp, #20
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f043 0307 	orr.w	r3, r3, #7
 80032b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	609a      	str	r2, [r3, #8]
}
 80032c0:	bf00      	nop
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	021a      	lsls	r2, r3, #8
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	431a      	orrs	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	609a      	str	r2, [r3, #8]
}
 8003300:	bf00      	nop
 8003302:	371c      	adds	r7, #28
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800331c:	2b01      	cmp	r3, #1
 800331e:	d101      	bne.n	8003324 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003320:	2302      	movs	r3, #2
 8003322:	e05a      	b.n	80033da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a21      	ldr	r2, [pc, #132]	; (80033e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d022      	beq.n	80033ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003370:	d01d      	beq.n	80033ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a1d      	ldr	r2, [pc, #116]	; (80033ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d018      	beq.n	80033ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a1b      	ldr	r2, [pc, #108]	; (80033f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d013      	beq.n	80033ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a1a      	ldr	r2, [pc, #104]	; (80033f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d00e      	beq.n	80033ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a18      	ldr	r2, [pc, #96]	; (80033f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d009      	beq.n	80033ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a17      	ldr	r2, [pc, #92]	; (80033fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d004      	beq.n	80033ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a15      	ldr	r2, [pc, #84]	; (8003400 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d10c      	bne.n	80033c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	4313      	orrs	r3, r2
 80033be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40010000 	.word	0x40010000
 80033ec:	40000400 	.word	0x40000400
 80033f0:	40000800 	.word	0x40000800
 80033f4:	40000c00 	.word	0x40000c00
 80033f8:	40010400 	.word	0x40010400
 80033fc:	40014000 	.word	0x40014000
 8003400:	40001800 	.word	0x40001800

08003404 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <memset>:
 800342c:	4402      	add	r2, r0
 800342e:	4603      	mov	r3, r0
 8003430:	4293      	cmp	r3, r2
 8003432:	d100      	bne.n	8003436 <memset+0xa>
 8003434:	4770      	bx	lr
 8003436:	f803 1b01 	strb.w	r1, [r3], #1
 800343a:	e7f9      	b.n	8003430 <memset+0x4>

0800343c <__libc_init_array>:
 800343c:	b570      	push	{r4, r5, r6, lr}
 800343e:	4d0d      	ldr	r5, [pc, #52]	; (8003474 <__libc_init_array+0x38>)
 8003440:	4c0d      	ldr	r4, [pc, #52]	; (8003478 <__libc_init_array+0x3c>)
 8003442:	1b64      	subs	r4, r4, r5
 8003444:	10a4      	asrs	r4, r4, #2
 8003446:	2600      	movs	r6, #0
 8003448:	42a6      	cmp	r6, r4
 800344a:	d109      	bne.n	8003460 <__libc_init_array+0x24>
 800344c:	4d0b      	ldr	r5, [pc, #44]	; (800347c <__libc_init_array+0x40>)
 800344e:	4c0c      	ldr	r4, [pc, #48]	; (8003480 <__libc_init_array+0x44>)
 8003450:	f000 f818 	bl	8003484 <_init>
 8003454:	1b64      	subs	r4, r4, r5
 8003456:	10a4      	asrs	r4, r4, #2
 8003458:	2600      	movs	r6, #0
 800345a:	42a6      	cmp	r6, r4
 800345c:	d105      	bne.n	800346a <__libc_init_array+0x2e>
 800345e:	bd70      	pop	{r4, r5, r6, pc}
 8003460:	f855 3b04 	ldr.w	r3, [r5], #4
 8003464:	4798      	blx	r3
 8003466:	3601      	adds	r6, #1
 8003468:	e7ee      	b.n	8003448 <__libc_init_array+0xc>
 800346a:	f855 3b04 	ldr.w	r3, [r5], #4
 800346e:	4798      	blx	r3
 8003470:	3601      	adds	r6, #1
 8003472:	e7f2      	b.n	800345a <__libc_init_array+0x1e>
 8003474:	080034b4 	.word	0x080034b4
 8003478:	080034b4 	.word	0x080034b4
 800347c:	080034b4 	.word	0x080034b4
 8003480:	080034b8 	.word	0x080034b8

08003484 <_init>:
 8003484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003486:	bf00      	nop
 8003488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800348a:	bc08      	pop	{r3}
 800348c:	469e      	mov	lr, r3
 800348e:	4770      	bx	lr

08003490 <_fini>:
 8003490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003492:	bf00      	nop
 8003494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003496:	bc08      	pop	{r3}
 8003498:	469e      	mov	lr, r3
 800349a:	4770      	bx	lr
