
Lab_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039d0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003b58  08003b58  00013b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b70  08003b70  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b70  08003b70  00013b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b78  08003b78  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b78  08003b78  00013b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b7c  08003b7c  00013b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000cc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d8  200000d8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000797f  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000015ab  00000000  00000000  000279fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000778  00000000  00000000  00028fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005bc  00000000  00000000  00029728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f4e9  00000000  00000000  00029ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009af5  00000000  00000000  000491cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000beecf  00000000  00000000  00052cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001e14  00000000  00000000  00111b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  001139a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b40 	.word	0x08003b40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003b40 	.word	0x08003b40

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fa9e 	bl	8000a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f828 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f900 	bl	80006d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d4:	f000 f8a2 	bl	800061c <MX_I2C1_Init>
  MX_I2C2_Init();
 80004d8:	f000 f8ce 	bl	8000678 <MX_I2C2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80004dc:	f000 f88a 	bl	80005f4 <MX_NVIC_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_I2C_Slave_Receive(&hi2c1, (uint8_t *)&receivedData, sizeof(receivedData),1000)== HAL_OK){
 80004e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e4:	2201      	movs	r2, #1
 80004e6:	490b      	ldr	r1, [pc, #44]	; (8000514 <main+0x50>)
 80004e8:	480b      	ldr	r0, [pc, #44]	; (8000518 <main+0x54>)
 80004ea:	f000 ff51 	bl	8001390 <HAL_I2C_Slave_Receive>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d1f5      	bne.n	80004e0 <main+0x1c>
		  GPIOD->ODR &= ~(GPIO_ODR_OD12 |GPIO_ODR_OD13 |GPIO_ODR_OD14 |GPIO_ODR_OD15 );
 80004f4:	4b09      	ldr	r3, [pc, #36]	; (800051c <main+0x58>)
 80004f6:	695b      	ldr	r3, [r3, #20]
 80004f8:	4a08      	ldr	r2, [pc, #32]	; (800051c <main+0x58>)
 80004fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80004fe:	6153      	str	r3, [r2, #20]
		  GPIOD->ODR |= (receivedData<<12);
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <main+0x58>)
 8000502:	695b      	ldr	r3, [r3, #20]
 8000504:	4a03      	ldr	r2, [pc, #12]	; (8000514 <main+0x50>)
 8000506:	7812      	ldrb	r2, [r2, #0]
 8000508:	0312      	lsls	r2, r2, #12
 800050a:	4611      	mov	r1, r2
 800050c:	4a03      	ldr	r2, [pc, #12]	; (800051c <main+0x58>)
 800050e:	430b      	orrs	r3, r1
 8000510:	6153      	str	r3, [r2, #20]
	  if(HAL_I2C_Slave_Receive(&hi2c1, (uint8_t *)&receivedData, sizeof(receivedData),1000)== HAL_OK){
 8000512:	e7e5      	b.n	80004e0 <main+0x1c>
 8000514:	200000d0 	.word	0x200000d0
 8000518:	20000028 	.word	0x20000028
 800051c:	40020c00 	.word	0x40020c00

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	; 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0320 	add.w	r3, r7, #32
 800052a:	2230      	movs	r2, #48	; 0x30
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f003 fada 	bl	8003ae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	4b28      	ldr	r3, [pc, #160]	; (80005ec <SystemClock_Config+0xcc>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	4a27      	ldr	r2, [pc, #156]	; (80005ec <SystemClock_Config+0xcc>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	; 0x40
 8000554:	4b25      	ldr	r3, [pc, #148]	; (80005ec <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <SystemClock_Config+0xd0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a21      	ldr	r2, [pc, #132]	; (80005f0 <SystemClock_Config+0xd0>)
 800056a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000584:	2310      	movs	r3, #16
 8000586:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000588:	2302      	movs	r3, #2
 800058a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058c:	2300      	movs	r3, #0
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000590:	2308      	movs	r3, #8
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000594:	2348      	movs	r3, #72	; 0x48
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800059c:	2307      	movs	r3, #7
 800059e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0320 	add.w	r3, r7, #32
 80005a4:	4618      	mov	r0, r3
 80005a6:	f002 fe1b 	bl	80031e0 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005b0:	f000 f8e2 	bl	8000778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2102      	movs	r1, #2
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 f87c 	bl	80036d0 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005de:	f000 f8cb 	bl	8000778 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2100      	movs	r1, #0
 80005fc:	201f      	movs	r0, #31
 80005fe:	f000 fb50 	bl	8000ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000602:	201f      	movs	r0, #31
 8000604:	f000 fb69 	bl	8000cda <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000608:	2200      	movs	r2, #0
 800060a:	2100      	movs	r1, #0
 800060c:	2020      	movs	r0, #32
 800060e:	f000 fb48 	bl	8000ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000612:	2020      	movs	r0, #32
 8000614:	f000 fb61 	bl	8000cda <HAL_NVIC_EnableIRQ>
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}

0800061c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_I2C1_Init+0x50>)
 8000622:	4a13      	ldr	r2, [pc, #76]	; (8000670 <MX_I2C1_Init+0x54>)
 8000624:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_I2C1_Init+0x50>)
 8000628:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_I2C1_Init+0x58>)
 800062a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_I2C1_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0xFA;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_I2C1_Init+0x50>)
 8000634:	22fa      	movs	r2, #250	; 0xfa
 8000636:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_I2C1_Init+0x50>)
 800063a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800063e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000640:	4b0a      	ldr	r3, [pc, #40]	; (800066c <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800064c:	4b07      	ldr	r3, [pc, #28]	; (800066c <MX_I2C1_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_I2C1_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <MX_I2C1_Init+0x50>)
 800065a:	f000 fd3f 	bl	80010dc <HAL_I2C_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000664:	f000 f888 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000028 	.word	0x20000028
 8000670:	40005400 	.word	0x40005400
 8000674:	000186a0 	.word	0x000186a0

08000678 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_I2C2_Init+0x50>)
 800067e:	4a13      	ldr	r2, [pc, #76]	; (80006cc <MX_I2C2_Init+0x54>)
 8000680:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_I2C2_Init+0x50>)
 8000684:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <MX_I2C2_Init+0x58>)
 8000686:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_I2C2_Init+0x50>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0xFA;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_I2C2_Init+0x50>)
 8000690:	22fa      	movs	r2, #250	; 0xfa
 8000692:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_I2C2_Init+0x50>)
 8000696:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800069a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <MX_I2C2_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_I2C2_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <MX_I2C2_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_I2C2_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <MX_I2C2_Init+0x50>)
 80006b6:	f000 fd11 	bl	80010dc <HAL_I2C_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006c0:	f000 f85a 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2000007c 	.word	0x2000007c
 80006cc:	40005800 	.word	0x40005800
 80006d0:	000186a0 	.word	0x000186a0

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 030c 	add.w	r3, r7, #12
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	4b20      	ldr	r3, [pc, #128]	; (8000770 <MX_GPIO_Init+0x9c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a1f      	ldr	r2, [pc, #124]	; (8000770 <MX_GPIO_Init+0x9c>)
 80006f4:	f043 0302 	orr.w	r3, r3, #2
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <MX_GPIO_Init+0x9c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0302 	and.w	r3, r3, #2
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <MX_GPIO_Init+0x9c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a18      	ldr	r2, [pc, #96]	; (8000770 <MX_GPIO_Init+0x9c>)
 8000710:	f043 0308 	orr.w	r3, r3, #8
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_GPIO_Init+0x9c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0308 	and.w	r3, r3, #8
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_GPIO_Init+0x9c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a11      	ldr	r2, [pc, #68]	; (8000770 <MX_GPIO_Init+0x9c>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_GPIO_Init+0x9c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000744:	480b      	ldr	r0, [pc, #44]	; (8000774 <MX_GPIO_Init+0xa0>)
 8000746:	f000 fcaf 	bl	80010a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800074a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800074e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	2301      	movs	r3, #1
 8000752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	4619      	mov	r1, r3
 8000762:	4804      	ldr	r0, [pc, #16]	; (8000774 <MX_GPIO_Init+0xa0>)
 8000764:	f000 fb04 	bl	8000d70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000768:	bf00      	nop
 800076a:	3720      	adds	r7, #32
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40023800 	.word	0x40023800
 8000774:	40020c00 	.word	0x40020c00

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000780:	e7fe      	b.n	8000780 <Error_Handler+0x8>
	...

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <HAL_MspInit+0x4c>)
 8000790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000792:	4a0f      	ldr	r2, [pc, #60]	; (80007d0 <HAL_MspInit+0x4c>)
 8000794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000798:	6453      	str	r3, [r2, #68]	; 0x44
 800079a:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <HAL_MspInit+0x4c>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <HAL_MspInit+0x4c>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ae:	4a08      	ldr	r2, [pc, #32]	; (80007d0 <HAL_MspInit+0x4c>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b4:	6413      	str	r3, [r2, #64]	; 0x40
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <HAL_MspInit+0x4c>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007c2:	2007      	movs	r0, #7
 80007c4:	f000 fa62 	bl	8000c8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40023800 	.word	0x40023800

080007d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08c      	sub	sp, #48	; 0x30
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a3a      	ldr	r2, [pc, #232]	; (80008dc <HAL_I2C_MspInit+0x108>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d12c      	bne.n	8000850 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]
 80007fa:	4b39      	ldr	r3, [pc, #228]	; (80008e0 <HAL_I2C_MspInit+0x10c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a38      	ldr	r2, [pc, #224]	; (80008e0 <HAL_I2C_MspInit+0x10c>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b36      	ldr	r3, [pc, #216]	; (80008e0 <HAL_I2C_MspInit+0x10c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	61bb      	str	r3, [r7, #24]
 8000810:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000812:	23c0      	movs	r3, #192	; 0xc0
 8000814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000816:	2312      	movs	r3, #18
 8000818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800081a:	2301      	movs	r3, #1
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081e:	2303      	movs	r3, #3
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000822:	2304      	movs	r3, #4
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	482d      	ldr	r0, [pc, #180]	; (80008e4 <HAL_I2C_MspInit+0x110>)
 800082e:	f000 fa9f 	bl	8000d70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	4b2a      	ldr	r3, [pc, #168]	; (80008e0 <HAL_I2C_MspInit+0x10c>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	4a29      	ldr	r2, [pc, #164]	; (80008e0 <HAL_I2C_MspInit+0x10c>)
 800083c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000840:	6413      	str	r3, [r2, #64]	; 0x40
 8000842:	4b27      	ldr	r3, [pc, #156]	; (80008e0 <HAL_I2C_MspInit+0x10c>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800084e:	e041      	b.n	80008d4 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a24      	ldr	r2, [pc, #144]	; (80008e8 <HAL_I2C_MspInit+0x114>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d13c      	bne.n	80008d4 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <HAL_I2C_MspInit+0x10c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a1f      	ldr	r2, [pc, #124]	; (80008e0 <HAL_I2C_MspInit+0x10c>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <HAL_I2C_MspInit+0x10c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0302 	and.w	r3, r3, #2
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000876:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800087a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800087c:	2312      	movs	r3, #18
 800087e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000880:	2301      	movs	r3, #1
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000888:	2304      	movs	r3, #4
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	4814      	ldr	r0, [pc, #80]	; (80008e4 <HAL_I2C_MspInit+0x110>)
 8000894:	f000 fa6c 	bl	8000d70 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <HAL_I2C_MspInit+0x10c>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <HAL_I2C_MspInit+0x10c>)
 80008a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008a6:	6413      	str	r3, [r2, #64]	; 0x40
 80008a8:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <HAL_I2C_MspInit+0x10c>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	2021      	movs	r0, #33	; 0x21
 80008ba:	f000 f9f2 	bl	8000ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80008be:	2021      	movs	r0, #33	; 0x21
 80008c0:	f000 fa0b 	bl	8000cda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2100      	movs	r1, #0
 80008c8:	2022      	movs	r0, #34	; 0x22
 80008ca:	f000 f9ea 	bl	8000ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80008ce:	2022      	movs	r0, #34	; 0x22
 80008d0:	f000 fa03 	bl	8000cda <HAL_NVIC_EnableIRQ>
}
 80008d4:	bf00      	nop
 80008d6:	3730      	adds	r7, #48	; 0x30
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40005400 	.word	0x40005400
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020400 	.word	0x40020400
 80008e8:	40005800 	.word	0x40005800

080008ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f0:	e7fe      	b.n	80008f0 <NMI_Handler+0x4>

080008f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <HardFault_Handler+0x4>

080008f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <MemManage_Handler+0x4>

080008fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <BusFault_Handler+0x4>

08000904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <UsageFault_Handler+0x4>

0800090a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000938:	f000 f8b8 	bl	8000aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}

08000940 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <I2C1_EV_IRQHandler+0x10>)
 8000946:	f000 fe2d 	bl	80015a4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000028 	.word	0x20000028

08000954 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000958:	4802      	ldr	r0, [pc, #8]	; (8000964 <I2C1_ER_IRQHandler+0x10>)
 800095a:	f000 ff76 	bl	800184a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000028 	.word	0x20000028

08000968 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800096c:	4802      	ldr	r0, [pc, #8]	; (8000978 <I2C2_EV_IRQHandler+0x10>)
 800096e:	f000 fe19 	bl	80015a4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	2000007c 	.word	0x2000007c

0800097c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000980:	4802      	ldr	r0, [pc, #8]	; (800098c <I2C2_ER_IRQHandler+0x10>)
 8000982:	f000 ff62 	bl	800184a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	2000007c 	.word	0x2000007c

08000990 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <SystemInit+0x20>)
 8000996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099a:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <SystemInit+0x20>)
 800099c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009b8:	f7ff ffea 	bl	8000990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009bc:	480c      	ldr	r0, [pc, #48]	; (80009f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009be:	490d      	ldr	r1, [pc, #52]	; (80009f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009c0:	4a0d      	ldr	r2, [pc, #52]	; (80009f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c4:	e002      	b.n	80009cc <LoopCopyDataInit>

080009c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ca:	3304      	adds	r3, #4

080009cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d0:	d3f9      	bcc.n	80009c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d2:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009d4:	4c0a      	ldr	r4, [pc, #40]	; (8000a00 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d8:	e001      	b.n	80009de <LoopFillZerobss>

080009da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009dc:	3204      	adds	r2, #4

080009de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e0:	d3fb      	bcc.n	80009da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009e2:	f003 f889 	bl	8003af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009e6:	f7ff fd6d 	bl	80004c4 <main>
  bx  lr    
 80009ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009f8:	08003b80 	.word	0x08003b80
  ldr r2, =_sbss
 80009fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a00:	200000d8 	.word	0x200000d8

08000a04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC_IRQHandler>
	...

08000a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a0c:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <HAL_Init+0x40>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a0d      	ldr	r2, [pc, #52]	; (8000a48 <HAL_Init+0x40>)
 8000a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a18:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <HAL_Init+0x40>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <HAL_Init+0x40>)
 8000a1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <HAL_Init+0x40>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a07      	ldr	r2, [pc, #28]	; (8000a48 <HAL_Init+0x40>)
 8000a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a30:	2003      	movs	r0, #3
 8000a32:	f000 f92b 	bl	8000c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a36:	2000      	movs	r0, #0
 8000a38:	f000 f808 	bl	8000a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a3c:	f7ff fea2 	bl	8000784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023c00 	.word	0x40023c00

08000a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_InitTick+0x54>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_InitTick+0x58>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 f943 	bl	8000cf6 <HAL_SYSTICK_Config>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e00e      	b.n	8000a98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b0f      	cmp	r3, #15
 8000a7e:	d80a      	bhi.n	8000a96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a80:	2200      	movs	r2, #0
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	f000 f90b 	bl	8000ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a8c:	4a06      	ldr	r2, [pc, #24]	; (8000aa8 <HAL_InitTick+0x5c>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a92:	2300      	movs	r3, #0
 8000a94:	e000      	b.n	8000a98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	20000004 	.word	0x20000004

08000aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_IncTick+0x20>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_IncTick+0x24>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <HAL_IncTick+0x24>)
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	200000d4 	.word	0x200000d4

08000ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <HAL_GetTick+0x14>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	200000d4 	.word	0x200000d4

08000aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1e:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	60d3      	str	r3, [r2, #12]
}
 8000b24:	bf00      	nop
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <__NVIC_GetPriorityGrouping+0x18>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	0a1b      	lsrs	r3, r3, #8
 8000b3e:	f003 0307 	and.w	r3, r3, #7
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	db0b      	blt.n	8000b7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	f003 021f 	and.w	r2, r3, #31
 8000b68:	4907      	ldr	r1, [pc, #28]	; (8000b88 <__NVIC_EnableIRQ+0x38>)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	095b      	lsrs	r3, r3, #5
 8000b70:	2001      	movs	r0, #1
 8000b72:	fa00 f202 	lsl.w	r2, r0, r2
 8000b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000e100 	.word	0xe000e100

08000b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	db0a      	blt.n	8000bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	490c      	ldr	r1, [pc, #48]	; (8000bd8 <__NVIC_SetPriority+0x4c>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	0112      	lsls	r2, r2, #4
 8000bac:	b2d2      	uxtb	r2, r2
 8000bae:	440b      	add	r3, r1
 8000bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb4:	e00a      	b.n	8000bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4908      	ldr	r1, [pc, #32]	; (8000bdc <__NVIC_SetPriority+0x50>)
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	f003 030f 	and.w	r3, r3, #15
 8000bc2:	3b04      	subs	r3, #4
 8000bc4:	0112      	lsls	r2, r2, #4
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	440b      	add	r3, r1
 8000bca:	761a      	strb	r2, [r3, #24]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000e100 	.word	0xe000e100
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	f1c3 0307 	rsb	r3, r3, #7
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	bf28      	it	cs
 8000bfe:	2304      	movcs	r3, #4
 8000c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3304      	adds	r3, #4
 8000c06:	2b06      	cmp	r3, #6
 8000c08:	d902      	bls.n	8000c10 <NVIC_EncodePriority+0x30>
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3b03      	subs	r3, #3
 8000c0e:	e000      	b.n	8000c12 <NVIC_EncodePriority+0x32>
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	f04f 32ff 	mov.w	r2, #4294967295
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	401a      	ands	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c28:	f04f 31ff 	mov.w	r1, #4294967295
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c32:	43d9      	mvns	r1, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	4313      	orrs	r3, r2
         );
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3724      	adds	r7, #36	; 0x24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
	...

08000c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c58:	d301      	bcc.n	8000c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00f      	b.n	8000c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <SysTick_Config+0x40>)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c66:	210f      	movs	r1, #15
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	f7ff ff8e 	bl	8000b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <SysTick_Config+0x40>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c76:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <SysTick_Config+0x40>)
 8000c78:	2207      	movs	r2, #7
 8000c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	e000e010 	.word	0xe000e010

08000c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff ff29 	bl	8000aec <__NVIC_SetPriorityGrouping>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b086      	sub	sp, #24
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
 8000cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb4:	f7ff ff3e 	bl	8000b34 <__NVIC_GetPriorityGrouping>
 8000cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	68b9      	ldr	r1, [r7, #8]
 8000cbe:	6978      	ldr	r0, [r7, #20]
 8000cc0:	f7ff ff8e 	bl	8000be0 <NVIC_EncodePriority>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cca:	4611      	mov	r1, r2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff5d 	bl	8000b8c <__NVIC_SetPriority>
}
 8000cd2:	bf00      	nop
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff31 	bl	8000b50 <__NVIC_EnableIRQ>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff ffa2 	bl	8000c48 <SysTick_Config>
 8000d04:	4603      	mov	r3, r0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d004      	beq.n	8000d2c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2280      	movs	r2, #128	; 0x80
 8000d26:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e00c      	b.n	8000d46 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2205      	movs	r2, #5
 8000d30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f022 0201 	bic.w	r2, r2, #1
 8000d42:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d60:	b2db      	uxtb	r3, r3
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b089      	sub	sp, #36	; 0x24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
 8000d8a:	e16b      	b.n	8001064 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	f040 815a 	bne.w	800105e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f003 0303 	and.w	r3, r3, #3
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d005      	beq.n	8000dc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d130      	bne.n	8000e24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	2203      	movs	r2, #3
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	68da      	ldr	r2, [r3, #12]
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000df8:	2201      	movs	r2, #1
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	091b      	lsrs	r3, r3, #4
 8000e0e:	f003 0201 	and.w	r2, r3, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	d017      	beq.n	8000e60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d123      	bne.n	8000eb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	08da      	lsrs	r2, r3, #3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3208      	adds	r2, #8
 8000e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	f003 0307 	and.w	r3, r3, #7
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	220f      	movs	r2, #15
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	691a      	ldr	r2, [r3, #16]
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	08da      	lsrs	r2, r3, #3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3208      	adds	r2, #8
 8000eae:	69b9      	ldr	r1, [r7, #24]
 8000eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0203 	and.w	r2, r3, #3
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f000 80b4 	beq.w	800105e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b60      	ldr	r3, [pc, #384]	; (800107c <HAL_GPIO_Init+0x30c>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	4a5f      	ldr	r2, [pc, #380]	; (800107c <HAL_GPIO_Init+0x30c>)
 8000f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f04:	6453      	str	r3, [r2, #68]	; 0x44
 8000f06:	4b5d      	ldr	r3, [pc, #372]	; (800107c <HAL_GPIO_Init+0x30c>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f12:	4a5b      	ldr	r2, [pc, #364]	; (8001080 <HAL_GPIO_Init+0x310>)
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	089b      	lsrs	r3, r3, #2
 8000f18:	3302      	adds	r3, #2
 8000f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	220f      	movs	r2, #15
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a52      	ldr	r2, [pc, #328]	; (8001084 <HAL_GPIO_Init+0x314>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d02b      	beq.n	8000f96 <HAL_GPIO_Init+0x226>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a51      	ldr	r2, [pc, #324]	; (8001088 <HAL_GPIO_Init+0x318>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d025      	beq.n	8000f92 <HAL_GPIO_Init+0x222>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a50      	ldr	r2, [pc, #320]	; (800108c <HAL_GPIO_Init+0x31c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d01f      	beq.n	8000f8e <HAL_GPIO_Init+0x21e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4f      	ldr	r2, [pc, #316]	; (8001090 <HAL_GPIO_Init+0x320>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d019      	beq.n	8000f8a <HAL_GPIO_Init+0x21a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4e      	ldr	r2, [pc, #312]	; (8001094 <HAL_GPIO_Init+0x324>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d013      	beq.n	8000f86 <HAL_GPIO_Init+0x216>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4d      	ldr	r2, [pc, #308]	; (8001098 <HAL_GPIO_Init+0x328>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d00d      	beq.n	8000f82 <HAL_GPIO_Init+0x212>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4c      	ldr	r2, [pc, #304]	; (800109c <HAL_GPIO_Init+0x32c>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d007      	beq.n	8000f7e <HAL_GPIO_Init+0x20e>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4b      	ldr	r2, [pc, #300]	; (80010a0 <HAL_GPIO_Init+0x330>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d101      	bne.n	8000f7a <HAL_GPIO_Init+0x20a>
 8000f76:	2307      	movs	r3, #7
 8000f78:	e00e      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f7a:	2308      	movs	r3, #8
 8000f7c:	e00c      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f7e:	2306      	movs	r3, #6
 8000f80:	e00a      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f82:	2305      	movs	r3, #5
 8000f84:	e008      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f86:	2304      	movs	r3, #4
 8000f88:	e006      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e004      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f8e:	2302      	movs	r3, #2
 8000f90:	e002      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f96:	2300      	movs	r3, #0
 8000f98:	69fa      	ldr	r2, [r7, #28]
 8000f9a:	f002 0203 	and.w	r2, r2, #3
 8000f9e:	0092      	lsls	r2, r2, #2
 8000fa0:	4093      	lsls	r3, r2
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fa8:	4935      	ldr	r1, [pc, #212]	; (8001080 <HAL_GPIO_Init+0x310>)
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	089b      	lsrs	r3, r3, #2
 8000fae:	3302      	adds	r3, #2
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fb6:	4b3b      	ldr	r3, [pc, #236]	; (80010a4 <HAL_GPIO_Init+0x334>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fda:	4a32      	ldr	r2, [pc, #200]	; (80010a4 <HAL_GPIO_Init+0x334>)
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe0:	4b30      	ldr	r3, [pc, #192]	; (80010a4 <HAL_GPIO_Init+0x334>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001004:	4a27      	ldr	r2, [pc, #156]	; (80010a4 <HAL_GPIO_Init+0x334>)
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800100a:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <HAL_GPIO_Init+0x334>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800102e:	4a1d      	ldr	r2, [pc, #116]	; (80010a4 <HAL_GPIO_Init+0x334>)
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <HAL_GPIO_Init+0x334>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001058:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <HAL_GPIO_Init+0x334>)
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3301      	adds	r3, #1
 8001062:	61fb      	str	r3, [r7, #28]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	2b0f      	cmp	r3, #15
 8001068:	f67f ae90 	bls.w	8000d8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	40013800 	.word	0x40013800
 8001084:	40020000 	.word	0x40020000
 8001088:	40020400 	.word	0x40020400
 800108c:	40020800 	.word	0x40020800
 8001090:	40020c00 	.word	0x40020c00
 8001094:	40021000 	.word	0x40021000
 8001098:	40021400 	.word	0x40021400
 800109c:	40021800 	.word	0x40021800
 80010a0:	40021c00 	.word	0x40021c00
 80010a4:	40013c00 	.word	0x40013c00

080010a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	807b      	strh	r3, [r7, #2]
 80010b4:	4613      	mov	r3, r2
 80010b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010b8:	787b      	ldrb	r3, [r7, #1]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010be:	887a      	ldrh	r2, [r7, #2]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010c4:	e003      	b.n	80010ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010c6:	887b      	ldrh	r3, [r7, #2]
 80010c8:	041a      	lsls	r2, r3, #16
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	619a      	str	r2, [r3, #24]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e12b      	b.n	8001346 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d106      	bne.n	8001108 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff fb66 	bl	80007d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2224      	movs	r2, #36	; 0x24
 800110c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f022 0201 	bic.w	r2, r2, #1
 800111e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800112e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800113e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001140:	f002 fcbe 	bl	8003ac0 <HAL_RCC_GetPCLK1Freq>
 8001144:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	4a81      	ldr	r2, [pc, #516]	; (8001350 <HAL_I2C_Init+0x274>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d807      	bhi.n	8001160 <HAL_I2C_Init+0x84>
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4a80      	ldr	r2, [pc, #512]	; (8001354 <HAL_I2C_Init+0x278>)
 8001154:	4293      	cmp	r3, r2
 8001156:	bf94      	ite	ls
 8001158:	2301      	movls	r3, #1
 800115a:	2300      	movhi	r3, #0
 800115c:	b2db      	uxtb	r3, r3
 800115e:	e006      	b.n	800116e <HAL_I2C_Init+0x92>
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4a7d      	ldr	r2, [pc, #500]	; (8001358 <HAL_I2C_Init+0x27c>)
 8001164:	4293      	cmp	r3, r2
 8001166:	bf94      	ite	ls
 8001168:	2301      	movls	r3, #1
 800116a:	2300      	movhi	r3, #0
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e0e7      	b.n	8001346 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	4a78      	ldr	r2, [pc, #480]	; (800135c <HAL_I2C_Init+0x280>)
 800117a:	fba2 2303 	umull	r2, r3, r2, r3
 800117e:	0c9b      	lsrs	r3, r3, #18
 8001180:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	430a      	orrs	r2, r1
 8001194:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	4a6a      	ldr	r2, [pc, #424]	; (8001350 <HAL_I2C_Init+0x274>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d802      	bhi.n	80011b0 <HAL_I2C_Init+0xd4>
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	3301      	adds	r3, #1
 80011ae:	e009      	b.n	80011c4 <HAL_I2C_Init+0xe8>
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011b6:	fb02 f303 	mul.w	r3, r2, r3
 80011ba:	4a69      	ldr	r2, [pc, #420]	; (8001360 <HAL_I2C_Init+0x284>)
 80011bc:	fba2 2303 	umull	r2, r3, r2, r3
 80011c0:	099b      	lsrs	r3, r3, #6
 80011c2:	3301      	adds	r3, #1
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	6812      	ldr	r2, [r2, #0]
 80011c8:	430b      	orrs	r3, r1
 80011ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80011d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	495c      	ldr	r1, [pc, #368]	; (8001350 <HAL_I2C_Init+0x274>)
 80011e0:	428b      	cmp	r3, r1
 80011e2:	d819      	bhi.n	8001218 <HAL_I2C_Init+0x13c>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	1e59      	subs	r1, r3, #1
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80011f2:	1c59      	adds	r1, r3, #1
 80011f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80011f8:	400b      	ands	r3, r1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d00a      	beq.n	8001214 <HAL_I2C_Init+0x138>
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	1e59      	subs	r1, r3, #1
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	fbb1 f3f3 	udiv	r3, r1, r3
 800120c:	3301      	adds	r3, #1
 800120e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001212:	e051      	b.n	80012b8 <HAL_I2C_Init+0x1dc>
 8001214:	2304      	movs	r3, #4
 8001216:	e04f      	b.n	80012b8 <HAL_I2C_Init+0x1dc>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d111      	bne.n	8001244 <HAL_I2C_Init+0x168>
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	1e58      	subs	r0, r3, #1
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6859      	ldr	r1, [r3, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	440b      	add	r3, r1
 800122e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001232:	3301      	adds	r3, #1
 8001234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001238:	2b00      	cmp	r3, #0
 800123a:	bf0c      	ite	eq
 800123c:	2301      	moveq	r3, #1
 800123e:	2300      	movne	r3, #0
 8001240:	b2db      	uxtb	r3, r3
 8001242:	e012      	b.n	800126a <HAL_I2C_Init+0x18e>
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	1e58      	subs	r0, r3, #1
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6859      	ldr	r1, [r3, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	440b      	add	r3, r1
 8001252:	0099      	lsls	r1, r3, #2
 8001254:	440b      	add	r3, r1
 8001256:	fbb0 f3f3 	udiv	r3, r0, r3
 800125a:	3301      	adds	r3, #1
 800125c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001260:	2b00      	cmp	r3, #0
 8001262:	bf0c      	ite	eq
 8001264:	2301      	moveq	r3, #1
 8001266:	2300      	movne	r3, #0
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_I2C_Init+0x196>
 800126e:	2301      	movs	r3, #1
 8001270:	e022      	b.n	80012b8 <HAL_I2C_Init+0x1dc>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10e      	bne.n	8001298 <HAL_I2C_Init+0x1bc>
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	1e58      	subs	r0, r3, #1
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6859      	ldr	r1, [r3, #4]
 8001282:	460b      	mov	r3, r1
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	440b      	add	r3, r1
 8001288:	fbb0 f3f3 	udiv	r3, r0, r3
 800128c:	3301      	adds	r3, #1
 800128e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001296:	e00f      	b.n	80012b8 <HAL_I2C_Init+0x1dc>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	1e58      	subs	r0, r3, #1
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6859      	ldr	r1, [r3, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	440b      	add	r3, r1
 80012a6:	0099      	lsls	r1, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80012ae:	3301      	adds	r3, #1
 80012b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	6809      	ldr	r1, [r1, #0]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69da      	ldr	r2, [r3, #28]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	430a      	orrs	r2, r1
 80012da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80012e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	6911      	ldr	r1, [r2, #16]
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	68d2      	ldr	r2, [r2, #12]
 80012f2:	4311      	orrs	r1, r2
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	6812      	ldr	r2, [r2, #0]
 80012f8:	430b      	orrs	r3, r1
 80012fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	695a      	ldr	r2, [r3, #20]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	431a      	orrs	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	430a      	orrs	r2, r1
 8001316:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f042 0201 	orr.w	r2, r2, #1
 8001326:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2220      	movs	r2, #32
 8001332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	000186a0 	.word	0x000186a0
 8001354:	001e847f 	.word	0x001e847f
 8001358:	003d08ff 	.word	0x003d08ff
 800135c:	431bde83 	.word	0x431bde83
 8001360:	10624dd3 	.word	0x10624dd3

08001364 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001376:	2b80      	cmp	r3, #128	; 0x80
 8001378:	d103      	bne.n	8001382 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2200      	movs	r2, #0
 8001380:	611a      	str	r2, [r3, #16]
  }
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af02      	add	r7, sp, #8
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	4613      	mov	r3, r2
 800139e:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013a0:	f7ff fb98 	bl	8000ad4 <HAL_GetTick>
 80013a4:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b20      	cmp	r3, #32
 80013b0:	f040 80ee 	bne.w	8001590 <HAL_I2C_Slave_Receive+0x200>
  {
    if ((pData == NULL) || (Size == (uint16_t)0))
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d002      	beq.n	80013c0 <HAL_I2C_Slave_Receive+0x30>
 80013ba:	88fb      	ldrh	r3, [r7, #6]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <HAL_I2C_Slave_Receive+0x34>
    {
      return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e0e6      	b.n	8001592 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d101      	bne.n	80013d2 <HAL_I2C_Slave_Receive+0x42>
 80013ce:	2302      	movs	r3, #2
 80013d0:	e0df      	b.n	8001592 <HAL_I2C_Slave_Receive+0x202>
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2201      	movs	r2, #1
 80013d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d007      	beq.n	80013f8 <HAL_I2C_Slave_Receive+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f042 0201 	orr.w	r2, r2, #1
 80013f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001406:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2222      	movs	r2, #34	; 0x22
 800140c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2220      	movs	r2, #32
 8001414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2200      	movs	r2, #0
 800141c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	68ba      	ldr	r2, [r7, #8]
 8001422:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	88fa      	ldrh	r2, [r7, #6]
 8001428:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800142e:	b29a      	uxth	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4a59      	ldr	r2, [pc, #356]	; (800159c <HAL_I2C_Slave_Receive+0x20c>)
 8001438:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001448:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	2200      	movs	r2, #0
 8001452:	4953      	ldr	r1, [pc, #332]	; (80015a0 <HAL_I2C_Slave_Receive+0x210>)
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f001 fd2b 	bl	8002eb0 <I2C_WaitOnFlagUntilTimeout>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <HAL_I2C_Slave_Receive+0xd4>
    {
      return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e096      	b.n	8001592 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001464:	2300      	movs	r3, #0
 8001466:	61bb      	str	r3, [r7, #24]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	61bb      	str	r3, [r7, #24]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	61bb      	str	r3, [r7, #24]
 8001478:	69bb      	ldr	r3, [r7, #24]

    while (hi2c->XferSize > 0U)
 800147a:	e04e      	b.n	800151a <HAL_I2C_Slave_Receive+0x18a>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800147c:	69fa      	ldr	r2, [r7, #28]
 800147e:	6839      	ldr	r1, [r7, #0]
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f001 fe05 	bl	8003090 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d009      	beq.n	80014a0 <HAL_I2C_Slave_Receive+0x110>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800149a:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e078      	b.n	8001592 <HAL_I2C_Slave_Receive+0x202>
      }

      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	691a      	ldr	r2, [r3, #16]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014bc:	3b01      	subs	r3, #1
 80014be:	b29a      	uxth	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	3b01      	subs	r3, #1
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	695b      	ldr	r3, [r3, #20]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	2b04      	cmp	r3, #4
 80014de:	d11c      	bne.n	800151a <HAL_I2C_Slave_Receive+0x18a>
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d018      	beq.n	800151a <HAL_I2C_Slave_Receive+0x18a>
      {
        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	691a      	ldr	r2, [r3, #16]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001504:	3b01      	subs	r3, #1
 8001506:	b29a      	uxth	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001510:	b29b      	uxth	r3, r3
 8001512:	3b01      	subs	r3, #1
 8001514:	b29a      	uxth	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1ac      	bne.n	800147c <HAL_I2C_Slave_Receive+0xec>
      }
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001522:	69fa      	ldr	r2, [r7, #28]
 8001524:	6839      	ldr	r1, [r7, #0]
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f001 fd3c 	bl	8002fa4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d009      	beq.n	8001546 <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001540:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e025      	b.n	8001592 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f042 0201 	orr.w	r2, r2, #1
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	697b      	ldr	r3, [r7, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001572:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2220      	movs	r2, #32
 8001578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800158c:	2300      	movs	r3, #0
 800158e:	e000      	b.n	8001592 <HAL_I2C_Slave_Receive+0x202>
  }
  else
  {
    return HAL_BUSY;
 8001590:	2302      	movs	r3, #2
  }
}
 8001592:	4618      	mov	r0, r3
 8001594:	3720      	adds	r7, #32
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	ffff0000 	.word	0xffff0000
 80015a0:	00010002 	.word	0x00010002

080015a4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015bc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80015c4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015cc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	2b10      	cmp	r3, #16
 80015d2:	d003      	beq.n	80015dc <HAL_I2C_EV_IRQHandler+0x38>
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	2b40      	cmp	r3, #64	; 0x40
 80015d8:	f040 80b1 	bne.w	800173e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10d      	bne.n	8001612 <HAL_I2C_EV_IRQHandler+0x6e>
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80015fc:	d003      	beq.n	8001606 <HAL_I2C_EV_IRQHandler+0x62>
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001604:	d101      	bne.n	800160a <HAL_I2C_EV_IRQHandler+0x66>
 8001606:	2301      	movs	r3, #1
 8001608:	e000      	b.n	800160c <HAL_I2C_EV_IRQHandler+0x68>
 800160a:	2300      	movs	r3, #0
 800160c:	2b01      	cmp	r3, #1
 800160e:	f000 8114 	beq.w	800183a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b00      	cmp	r3, #0
 800161a:	d00b      	beq.n	8001634 <HAL_I2C_EV_IRQHandler+0x90>
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001622:	2b00      	cmp	r3, #0
 8001624:	d006      	beq.n	8001634 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f001 fdbe 	bl	80031a8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 fd7a 	bl	8002126 <I2C_Master_SB>
 8001632:	e083      	b.n	800173c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	2b00      	cmp	r3, #0
 800163c:	d008      	beq.n	8001650 <HAL_I2C_EV_IRQHandler+0xac>
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 fdf2 	bl	8002232 <I2C_Master_ADD10>
 800164e:	e075      	b.n	800173c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d008      	beq.n	800166c <HAL_I2C_EV_IRQHandler+0xc8>
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 fe0e 	bl	8002286 <I2C_Master_ADDR>
 800166a:	e067      	b.n	800173c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	f003 0304 	and.w	r3, r3, #4
 8001672:	2b00      	cmp	r3, #0
 8001674:	d036      	beq.n	80016e4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001684:	f000 80db 	beq.w	800183e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00d      	beq.n	80016ae <HAL_I2C_EV_IRQHandler+0x10a>
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001698:	2b00      	cmp	r3, #0
 800169a:	d008      	beq.n	80016ae <HAL_I2C_EV_IRQHandler+0x10a>
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d103      	bne.n	80016ae <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f9d6 	bl	8001a58 <I2C_MasterTransmit_TXE>
 80016ac:	e046      	b.n	800173c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 80c2 	beq.w	800183e <HAL_I2C_EV_IRQHandler+0x29a>
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 80bc 	beq.w	800183e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80016c6:	7bbb      	ldrb	r3, [r7, #14]
 80016c8:	2b21      	cmp	r3, #33	; 0x21
 80016ca:	d103      	bne.n	80016d4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 fa5f 	bl	8001b90 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016d2:	e0b4      	b.n	800183e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	2b40      	cmp	r3, #64	; 0x40
 80016d8:	f040 80b1 	bne.w	800183e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 facd 	bl	8001c7c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016e2:	e0ac      	b.n	800183e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016f2:	f000 80a4 	beq.w	800183e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00d      	beq.n	800171c <HAL_I2C_EV_IRQHandler+0x178>
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001706:	2b00      	cmp	r3, #0
 8001708:	d008      	beq.n	800171c <HAL_I2C_EV_IRQHandler+0x178>
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d103      	bne.n	800171c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 fb49 	bl	8001dac <I2C_MasterReceive_RXNE>
 800171a:	e00f      	b.n	800173c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f003 0304 	and.w	r3, r3, #4
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 808b 	beq.w	800183e <HAL_I2C_EV_IRQHandler+0x29a>
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 8085 	beq.w	800183e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 fc01 	bl	8001f3c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800173a:	e080      	b.n	800183e <HAL_I2C_EV_IRQHandler+0x29a>
 800173c:	e07f      	b.n	800183e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	2b00      	cmp	r3, #0
 8001744:	d004      	beq.n	8001750 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	e007      	b.n	8001760 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d011      	beq.n	800178e <HAL_I2C_EV_IRQHandler+0x1ea>
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001770:	2b00      	cmp	r3, #0
 8001772:	d00c      	beq.n	800178e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001784:	69b9      	ldr	r1, [r7, #24]
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 ffcc 	bl	8002724 <I2C_Slave_ADDR>
 800178c:	e05a      	b.n	8001844 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	f003 0310 	and.w	r3, r3, #16
 8001794:	2b00      	cmp	r3, #0
 8001796:	d008      	beq.n	80017aa <HAL_I2C_EV_IRQHandler+0x206>
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f001 f806 	bl	80027b4 <I2C_Slave_STOPF>
 80017a8:	e04c      	b.n	8001844 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80017aa:	7bbb      	ldrb	r3, [r7, #14]
 80017ac:	2b21      	cmp	r3, #33	; 0x21
 80017ae:	d002      	beq.n	80017b6 <HAL_I2C_EV_IRQHandler+0x212>
 80017b0:	7bbb      	ldrb	r3, [r7, #14]
 80017b2:	2b29      	cmp	r3, #41	; 0x29
 80017b4:	d120      	bne.n	80017f8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00d      	beq.n	80017dc <HAL_I2C_EV_IRQHandler+0x238>
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d008      	beq.n	80017dc <HAL_I2C_EV_IRQHandler+0x238>
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d103      	bne.n	80017dc <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 fee7 	bl	80025a8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017da:	e032      	b.n	8001842 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d02d      	beq.n	8001842 <HAL_I2C_EV_IRQHandler+0x29e>
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d028      	beq.n	8001842 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 ff16 	bl	8002622 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017f6:	e024      	b.n	8001842 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00d      	beq.n	800181e <HAL_I2C_EV_IRQHandler+0x27a>
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001808:	2b00      	cmp	r3, #0
 800180a:	d008      	beq.n	800181e <HAL_I2C_EV_IRQHandler+0x27a>
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	2b00      	cmp	r3, #0
 8001814:	d103      	bne.n	800181e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 ff24 	bl	8002664 <I2C_SlaveReceive_RXNE>
 800181c:	e012      	b.n	8001844 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00d      	beq.n	8001844 <HAL_I2C_EV_IRQHandler+0x2a0>
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800182e:	2b00      	cmp	r3, #0
 8001830:	d008      	beq.n	8001844 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 ff54 	bl	80026e0 <I2C_SlaveReceive_BTF>
 8001838:	e004      	b.n	8001844 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800183a:	bf00      	nop
 800183c:	e002      	b.n	8001844 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800183e:	bf00      	nop
 8001840:	e000      	b.n	8001844 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001842:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001844:	3720      	adds	r7, #32
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b08a      	sub	sp, #40	; 0x28
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800186c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800186e:	6a3b      	ldr	r3, [r7, #32]
 8001870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00d      	beq.n	8001894 <HAL_I2C_ER_IRQHandler+0x4a>
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187e:	2b00      	cmp	r3, #0
 8001880:	d008      	beq.n	8001894 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001892:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00d      	beq.n	80018ba <HAL_I2C_ER_IRQHandler+0x70>
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d008      	beq.n	80018ba <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	f043 0302 	orr.w	r3, r3, #2
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80018b8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80018ba:	6a3b      	ldr	r3, [r7, #32]
 80018bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d03e      	beq.n	8001942 <HAL_I2C_ER_IRQHandler+0xf8>
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d039      	beq.n	8001942 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80018ce:	7efb      	ldrb	r3, [r7, #27]
 80018d0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018e0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80018e8:	7ebb      	ldrb	r3, [r7, #26]
 80018ea:	2b20      	cmp	r3, #32
 80018ec:	d112      	bne.n	8001914 <HAL_I2C_ER_IRQHandler+0xca>
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10f      	bne.n	8001914 <HAL_I2C_ER_IRQHandler+0xca>
 80018f4:	7cfb      	ldrb	r3, [r7, #19]
 80018f6:	2b21      	cmp	r3, #33	; 0x21
 80018f8:	d008      	beq.n	800190c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80018fa:	7cfb      	ldrb	r3, [r7, #19]
 80018fc:	2b29      	cmp	r3, #41	; 0x29
 80018fe:	d005      	beq.n	800190c <HAL_I2C_ER_IRQHandler+0xc2>
 8001900:	7cfb      	ldrb	r3, [r7, #19]
 8001902:	2b28      	cmp	r3, #40	; 0x28
 8001904:	d106      	bne.n	8001914 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b21      	cmp	r3, #33	; 0x21
 800190a:	d103      	bne.n	8001914 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f001 f881 	bl	8002a14 <I2C_Slave_AF>
 8001912:	e016      	b.n	8001942 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800191c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001926:	7efb      	ldrb	r3, [r7, #27]
 8001928:	2b10      	cmp	r3, #16
 800192a:	d002      	beq.n	8001932 <HAL_I2C_ER_IRQHandler+0xe8>
 800192c:	7efb      	ldrb	r3, [r7, #27]
 800192e:	2b40      	cmp	r3, #64	; 0x40
 8001930:	d107      	bne.n	8001942 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001940:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00d      	beq.n	8001968 <HAL_I2C_ER_IRQHandler+0x11e>
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001952:	2b00      	cmp	r3, #0
 8001954:	d008      	beq.n	8001968 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	f043 0308 	orr.w	r3, r3, #8
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001966:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	2b00      	cmp	r3, #0
 800196c:	d008      	beq.n	8001980 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	431a      	orrs	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f001 f8be 	bl	8002afc <I2C_ITError>
  }
}
 8001980:	bf00      	nop
 8001982:	3728      	adds	r7, #40	; 0x28
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	70fb      	strb	r3, [r7, #3]
 80019e4:	4613      	mov	r3, r2
 80019e6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a66:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a6e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a74:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d150      	bne.n	8001b20 <I2C_MasterTransmit_TXE+0xc8>
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	2b21      	cmp	r3, #33	; 0x21
 8001a82:	d14d      	bne.n	8001b20 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d01d      	beq.n	8001ac6 <I2C_MasterTransmit_TXE+0x6e>
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	2b20      	cmp	r3, #32
 8001a8e:	d01a      	beq.n	8001ac6 <I2C_MasterTransmit_TXE+0x6e>
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a96:	d016      	beq.n	8001ac6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001aa6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2211      	movs	r2, #17
 8001aac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2220      	movs	r2, #32
 8001aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ff62 	bl	8001988 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ac4:	e060      	b.n	8001b88 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ad4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ae4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2220      	movs	r2, #32
 8001af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b40      	cmp	r3, #64	; 0x40
 8001afe:	d107      	bne.n	8001b10 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ff7d 	bl	8001a08 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b0e:	e03b      	b.n	8001b88 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff ff35 	bl	8001988 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b1e:	e033      	b.n	8001b88 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
 8001b22:	2b21      	cmp	r3, #33	; 0x21
 8001b24:	d005      	beq.n	8001b32 <I2C_MasterTransmit_TXE+0xda>
 8001b26:	7bbb      	ldrb	r3, [r7, #14]
 8001b28:	2b40      	cmp	r3, #64	; 0x40
 8001b2a:	d12d      	bne.n	8001b88 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	2b22      	cmp	r3, #34	; 0x22
 8001b30:	d12a      	bne.n	8001b88 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d108      	bne.n	8001b4e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b4a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001b4c:	e01c      	b.n	8001b88 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b40      	cmp	r3, #64	; 0x40
 8001b58:	d103      	bne.n	8001b62 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f88e 	bl	8001c7c <I2C_MemoryTransmit_TXE_BTF>
}
 8001b60:	e012      	b.n	8001b88 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b66:	781a      	ldrb	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001b86:	e7ff      	b.n	8001b88 <I2C_MasterTransmit_TXE+0x130>
 8001b88:	bf00      	nop
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b21      	cmp	r3, #33	; 0x21
 8001ba8:	d164      	bne.n	8001c74 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d012      	beq.n	8001bda <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	781a      	ldrb	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	1c5a      	adds	r2, r3, #1
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001bd8:	e04c      	b.n	8001c74 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d01d      	beq.n	8001c1c <I2C_MasterTransmit_BTF+0x8c>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2b20      	cmp	r3, #32
 8001be4:	d01a      	beq.n	8001c1c <I2C_MasterTransmit_BTF+0x8c>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001bec:	d016      	beq.n	8001c1c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001bfc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2211      	movs	r2, #17
 8001c02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2220      	movs	r2, #32
 8001c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff feb7 	bl	8001988 <HAL_I2C_MasterTxCpltCallback>
}
 8001c1a:	e02b      	b.n	8001c74 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c2a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c3a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2220      	movs	r2, #32
 8001c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b40      	cmp	r3, #64	; 0x40
 8001c54:	d107      	bne.n	8001c66 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff fed2 	bl	8001a08 <HAL_I2C_MemTxCpltCallback>
}
 8001c64:	e006      	b.n	8001c74 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff fe8a 	bl	8001988 <HAL_I2C_MasterTxCpltCallback>
}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c8a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d11d      	bne.n	8001cd0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d10b      	bne.n	8001cb4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cac:	1c9a      	adds	r2, r3, #2
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001cb2:	e077      	b.n	8001da4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	121b      	asrs	r3, r3, #8
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001cce:	e069      	b.n	8001da4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d10b      	bne.n	8001cf0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001cee:	e059      	b.n	8001da4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d152      	bne.n	8001d9e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	2b22      	cmp	r3, #34	; 0x22
 8001cfc:	d10d      	bne.n	8001d1a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d0c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001d18:	e044      	b.n	8001da4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d015      	beq.n	8001d50 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
 8001d26:	2b21      	cmp	r3, #33	; 0x21
 8001d28:	d112      	bne.n	8001d50 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2e:	781a      	ldrb	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	3b01      	subs	r3, #1
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001d4e:	e029      	b.n	8001da4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d124      	bne.n	8001da4 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	2b21      	cmp	r3, #33	; 0x21
 8001d5e:	d121      	bne.n	8001da4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d6e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d7e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff fe36 	bl	8001a08 <HAL_I2C_MemTxCpltCallback>
}
 8001d9c:	e002      	b.n	8001da4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff fae0 	bl	8001364 <I2C_Flush_DR>
}
 8001da4:	bf00      	nop
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b22      	cmp	r3, #34	; 0x22
 8001dbe:	f040 80b9 	bne.w	8001f34 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d921      	bls.n	8001e1a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	f040 8096 	bne.w	8001f34 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e16:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001e18:	e08c      	b.n	8001f34 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d07f      	beq.n	8001f22 <I2C_MasterReceive_RXNE+0x176>
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d002      	beq.n	8001e2e <I2C_MasterReceive_RXNE+0x82>
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d179      	bne.n	8001f22 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f001 f8fc 	bl	800302c <I2C_WaitOnSTOPRequestThroughIT>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d14c      	bne.n	8001ed4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e48:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e58:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	1c5a      	adds	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2220      	movs	r2, #32
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b40      	cmp	r3, #64	; 0x40
 8001e92:	d10a      	bne.n	8001eaa <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff fdba 	bl	8001a1c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001ea8:	e044      	b.n	8001f34 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d002      	beq.n	8001ebe <I2C_MasterReceive_RXNE+0x112>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b20      	cmp	r3, #32
 8001ebc:	d103      	bne.n	8001ec6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ec4:	e002      	b.n	8001ecc <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2212      	movs	r2, #18
 8001eca:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff fd65 	bl	800199c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001ed2:	e02f      	b.n	8001f34 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ee2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	3b01      	subs	r3, #1
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff fd88 	bl	8001a30 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001f20:	e008      	b.n	8001f34 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f30:	605a      	str	r2, [r3, #4]
}
 8001f32:	e7ff      	b.n	8001f34 <I2C_MasterReceive_RXNE+0x188>
 8001f34:	bf00      	nop
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f48:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d11b      	bne.n	8001f8c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f62:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691a      	ldr	r2, [r3, #16]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	3b01      	subs	r3, #1
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001f8a:	e0c8      	b.n	800211e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	2b03      	cmp	r3, #3
 8001f94:	d129      	bne.n	8001fea <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fa4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d00a      	beq.n	8001fc2 <I2C_MasterReceive_BTF+0x86>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d007      	beq.n	8001fc2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fc0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001fe8:	e099      	b.n	800211e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	f040 8081 	bne.w	80020f8 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d002      	beq.n	8002002 <I2C_MasterReceive_BTF+0xc6>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b10      	cmp	r3, #16
 8002000:	d108      	bne.n	8002014 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	e019      	b.n	8002048 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2b04      	cmp	r3, #4
 8002018:	d002      	beq.n	8002020 <I2C_MasterReceive_BTF+0xe4>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2b02      	cmp	r3, #2
 800201e:	d108      	bne.n	8002032 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	e00a      	b.n	8002048 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2b10      	cmp	r3, #16
 8002036:	d007      	beq.n	8002048 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002046:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691a      	ldr	r2, [r3, #16]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002064:	b29b      	uxth	r3, r3
 8002066:	3b01      	subs	r3, #1
 8002068:	b29a      	uxth	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208a:	b29b      	uxth	r3, r3
 800208c:	3b01      	subs	r3, #1
 800208e:	b29a      	uxth	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80020a2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2220      	movs	r2, #32
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b40      	cmp	r3, #64	; 0x40
 80020b6:	d10a      	bne.n	80020ce <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff fca8 	bl	8001a1c <HAL_I2C_MemRxCpltCallback>
}
 80020cc:	e027      	b.n	800211e <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d002      	beq.n	80020e2 <I2C_MasterReceive_BTF+0x1a6>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b20      	cmp	r3, #32
 80020e0:	d103      	bne.n	80020ea <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	631a      	str	r2, [r3, #48]	; 0x30
 80020e8:	e002      	b.n	80020f0 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2212      	movs	r2, #18
 80020ee:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff fc53 	bl	800199c <HAL_I2C_MasterRxCpltCallback>
}
 80020f6:	e012      	b.n	800211e <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691a      	ldr	r2, [r3, #16]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002114:	b29b      	uxth	r3, r3
 8002116:	3b01      	subs	r3, #1
 8002118:	b29a      	uxth	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800211e:	bf00      	nop
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b40      	cmp	r3, #64	; 0x40
 8002138:	d117      	bne.n	800216a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800213e:	2b00      	cmp	r3, #0
 8002140:	d109      	bne.n	8002156 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	b2db      	uxtb	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002152:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002154:	e067      	b.n	8002226 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	b2db      	uxtb	r3, r3
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	b2da      	uxtb	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	611a      	str	r2, [r3, #16]
}
 8002168:	e05d      	b.n	8002226 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002172:	d133      	bne.n	80021dc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b21      	cmp	r3, #33	; 0x21
 800217e:	d109      	bne.n	8002194 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002184:	b2db      	uxtb	r3, r3
 8002186:	461a      	mov	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002190:	611a      	str	r2, [r3, #16]
 8002192:	e008      	b.n	80021a6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002198:	b2db      	uxtb	r3, r3
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d004      	beq.n	80021b8 <I2C_Master_SB+0x92>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d108      	bne.n	80021ca <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d032      	beq.n	8002226 <I2C_Master_SB+0x100>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d02d      	beq.n	8002226 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021d8:	605a      	str	r2, [r3, #4]
}
 80021da:	e024      	b.n	8002226 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d10e      	bne.n	8002202 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	11db      	asrs	r3, r3, #7
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f003 0306 	and.w	r3, r3, #6
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	f063 030f 	orn	r3, r3, #15
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	611a      	str	r2, [r3, #16]
}
 8002200:	e011      	b.n	8002226 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002206:	2b01      	cmp	r3, #1
 8002208:	d10d      	bne.n	8002226 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	b29b      	uxth	r3, r3
 8002210:	11db      	asrs	r3, r3, #7
 8002212:	b2db      	uxtb	r3, r3
 8002214:	f003 0306 	and.w	r3, r3, #6
 8002218:	b2db      	uxtb	r3, r3
 800221a:	f063 030e 	orn	r3, r3, #14
 800221e:	b2da      	uxtb	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	611a      	str	r2, [r3, #16]
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	b2da      	uxtb	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224a:	2b00      	cmp	r3, #0
 800224c:	d004      	beq.n	8002258 <I2C_Master_ADD10+0x26>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002254:	2b00      	cmp	r3, #0
 8002256:	d108      	bne.n	800226a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00c      	beq.n	800227a <I2C_Master_ADD10+0x48>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002266:	2b00      	cmp	r3, #0
 8002268:	d007      	beq.n	800227a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002278:	605a      	str	r2, [r3, #4]
  }
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002286:	b480      	push	{r7}
 8002288:	b091      	sub	sp, #68	; 0x44
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002294:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b22      	cmp	r3, #34	; 0x22
 80022ae:	f040 8169 	bne.w	8002584 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10f      	bne.n	80022da <I2C_Master_ADDR+0x54>
 80022ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80022be:	2b40      	cmp	r3, #64	; 0x40
 80022c0:	d10b      	bne.n	80022da <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022c2:	2300      	movs	r3, #0
 80022c4:	633b      	str	r3, [r7, #48]	; 0x30
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	633b      	str	r3, [r7, #48]	; 0x30
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	633b      	str	r3, [r7, #48]	; 0x30
 80022d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d8:	e160      	b.n	800259c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d11d      	bne.n	800231e <I2C_Master_ADDR+0x98>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80022ea:	d118      	bne.n	800231e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ec:	2300      	movs	r3, #0
 80022ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002300:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002310:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	651a      	str	r2, [r3, #80]	; 0x50
 800231c:	e13e      	b.n	800259c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002322:	b29b      	uxth	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d113      	bne.n	8002350 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002328:	2300      	movs	r3, #0
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	62bb      	str	r3, [r7, #40]	; 0x28
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	62bb      	str	r3, [r7, #40]	; 0x28
 800233c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	e115      	b.n	800257c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002354:	b29b      	uxth	r3, r3
 8002356:	2b01      	cmp	r3, #1
 8002358:	f040 808a 	bne.w	8002470 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800235c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002362:	d137      	bne.n	80023d4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002372:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800237e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002382:	d113      	bne.n	80023ac <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002392:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002394:	2300      	movs	r3, #0
 8002396:	627b      	str	r3, [r7, #36]	; 0x24
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	e0e7      	b.n	800257c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ac:	2300      	movs	r3, #0
 80023ae:	623b      	str	r3, [r7, #32]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	623b      	str	r3, [r7, #32]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	623b      	str	r3, [r7, #32]
 80023c0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	e0d3      	b.n	800257c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80023d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d02e      	beq.n	8002438 <I2C_Master_ADDR+0x1b2>
 80023da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023dc:	2b20      	cmp	r3, #32
 80023de:	d02b      	beq.n	8002438 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80023e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e2:	2b12      	cmp	r3, #18
 80023e4:	d102      	bne.n	80023ec <I2C_Master_ADDR+0x166>
 80023e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d125      	bne.n	8002438 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80023ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d00e      	beq.n	8002410 <I2C_Master_ADDR+0x18a>
 80023f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d00b      	beq.n	8002410 <I2C_Master_ADDR+0x18a>
 80023f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fa:	2b10      	cmp	r3, #16
 80023fc:	d008      	beq.n	8002410 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	e007      	b.n	8002420 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800241e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002420:	2300      	movs	r3, #0
 8002422:	61fb      	str	r3, [r7, #28]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	61fb      	str	r3, [r7, #28]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	61fb      	str	r3, [r7, #28]
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	e0a1      	b.n	800257c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002446:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002448:	2300      	movs	r3, #0
 800244a:	61bb      	str	r3, [r7, #24]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	61bb      	str	r3, [r7, #24]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	61bb      	str	r3, [r7, #24]
 800245c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	e085      	b.n	800257c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002474:	b29b      	uxth	r3, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d14d      	bne.n	8002516 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800247a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800247c:	2b04      	cmp	r3, #4
 800247e:	d016      	beq.n	80024ae <I2C_Master_ADDR+0x228>
 8002480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002482:	2b02      	cmp	r3, #2
 8002484:	d013      	beq.n	80024ae <I2C_Master_ADDR+0x228>
 8002486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002488:	2b10      	cmp	r3, #16
 800248a:	d010      	beq.n	80024ae <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800249a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	e007      	b.n	80024be <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024bc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024cc:	d117      	bne.n	80024fe <I2C_Master_ADDR+0x278>
 80024ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024d4:	d00b      	beq.n	80024ee <I2C_Master_ADDR+0x268>
 80024d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d008      	beq.n	80024ee <I2C_Master_ADDR+0x268>
 80024dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d005      	beq.n	80024ee <I2C_Master_ADDR+0x268>
 80024e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e4:	2b10      	cmp	r3, #16
 80024e6:	d002      	beq.n	80024ee <I2C_Master_ADDR+0x268>
 80024e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	d107      	bne.n	80024fe <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024fc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	e032      	b.n	800257c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002524:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002534:	d117      	bne.n	8002566 <I2C_Master_ADDR+0x2e0>
 8002536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002538:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800253c:	d00b      	beq.n	8002556 <I2C_Master_ADDR+0x2d0>
 800253e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002540:	2b01      	cmp	r3, #1
 8002542:	d008      	beq.n	8002556 <I2C_Master_ADDR+0x2d0>
 8002544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002546:	2b08      	cmp	r3, #8
 8002548:	d005      	beq.n	8002556 <I2C_Master_ADDR+0x2d0>
 800254a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800254c:	2b10      	cmp	r3, #16
 800254e:	d002      	beq.n	8002556 <I2C_Master_ADDR+0x2d0>
 8002550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002552:	2b20      	cmp	r3, #32
 8002554:	d107      	bne.n	8002566 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002564:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002582:	e00b      	b.n	800259c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]
}
 800259a:	e7ff      	b.n	800259c <I2C_Master_ADDR+0x316>
 800259c:	bf00      	nop
 800259e:	3744      	adds	r7, #68	; 0x44
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d02b      	beq.n	800261a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	781a      	ldrb	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025dc:	b29b      	uxth	r3, r3
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d114      	bne.n	800261a <I2C_SlaveTransmit_TXE+0x72>
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	2b29      	cmp	r3, #41	; 0x29
 80025f4:	d111      	bne.n	800261a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002604:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2221      	movs	r2, #33	; 0x21
 800260a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2228      	movs	r2, #40	; 0x28
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff f9cb 	bl	80019b0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262e:	b29b      	uxth	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d011      	beq.n	8002658 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	781a      	ldrb	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264e:	b29b      	uxth	r3, r3
 8002650:	3b01      	subs	r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002672:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002678:	b29b      	uxth	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d02c      	beq.n	80026d8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269a:	b29b      	uxth	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d114      	bne.n	80026d8 <I2C_SlaveReceive_RXNE+0x74>
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	2b2a      	cmp	r3, #42	; 0x2a
 80026b2:	d111      	bne.n	80026d8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026c2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2222      	movs	r2, #34	; 0x22
 80026c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2228      	movs	r2, #40	; 0x28
 80026ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff f976 	bl	80019c4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80026d8:	bf00      	nop
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d012      	beq.n	8002718 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	691a      	ldr	r2, [r3, #16]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270e:	b29b      	uxth	r3, r3
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800272e:	2300      	movs	r3, #0
 8002730:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800273e:	2b28      	cmp	r3, #40	; 0x28
 8002740:	d125      	bne.n	800278e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002750:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800275c:	2301      	movs	r3, #1
 800275e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002766:	2b00      	cmp	r3, #0
 8002768:	d103      	bne.n	8002772 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	81bb      	strh	r3, [r7, #12]
 8002770:	e002      	b.n	8002778 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002780:	89ba      	ldrh	r2, [r7, #12]
 8002782:	7bfb      	ldrb	r3, [r7, #15]
 8002784:	4619      	mov	r1, r3
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff f926 	bl	80019d8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800278c:	e00e      	b.n	80027ac <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800278e:	2300      	movs	r3, #0
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80027ac:	bf00      	nop
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027d2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80027d4:	2300      	movs	r3, #0
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	60bb      	str	r3, [r7, #8]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002800:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800280c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002810:	d172      	bne.n	80028f8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002812:	7bfb      	ldrb	r3, [r7, #15]
 8002814:	2b22      	cmp	r3, #34	; 0x22
 8002816:	d002      	beq.n	800281e <I2C_Slave_STOPF+0x6a>
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	2b2a      	cmp	r3, #42	; 0x2a
 800281c:	d135      	bne.n	800288a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	b29a      	uxth	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002830:	b29b      	uxth	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d005      	beq.n	8002842 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f043 0204 	orr.w	r2, r3, #4
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002850:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe fa7b 	bl	8000d52 <HAL_DMA_GetState>
 800285c:	4603      	mov	r3, r0
 800285e:	2b01      	cmp	r3, #1
 8002860:	d049      	beq.n	80028f6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002866:	4a69      	ldr	r2, [pc, #420]	; (8002a0c <I2C_Slave_STOPF+0x258>)
 8002868:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fa4d 	bl	8000d0e <HAL_DMA_Abort_IT>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d03d      	beq.n	80028f6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002884:	4610      	mov	r0, r2
 8002886:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002888:	e035      	b.n	80028f6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	b29a      	uxth	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289c:	b29b      	uxth	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f043 0204 	orr.w	r2, r3, #4
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fe fa45 	bl	8000d52 <HAL_DMA_GetState>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d014      	beq.n	80028f8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d2:	4a4e      	ldr	r2, [pc, #312]	; (8002a0c <I2C_Slave_STOPF+0x258>)
 80028d4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe fa17 	bl	8000d0e <HAL_DMA_Abort_IT>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d008      	beq.n	80028f8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028f0:	4610      	mov	r0, r2
 80028f2:	4798      	blx	r3
 80028f4:	e000      	b.n	80028f8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80028f6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d03e      	beq.n	8002980 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b04      	cmp	r3, #4
 800290e:	d112      	bne.n	8002936 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691a      	ldr	r2, [r3, #16]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002940:	2b40      	cmp	r3, #64	; 0x40
 8002942:	d112      	bne.n	800296a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691a      	ldr	r2, [r3, #16]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002960:	b29b      	uxth	r3, r3
 8002962:	3b01      	subs	r3, #1
 8002964:	b29a      	uxth	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296e:	b29b      	uxth	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	f043 0204 	orr.w	r2, r3, #4
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f8b7 	bl	8002afc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800298e:	e039      	b.n	8002a04 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	2b2a      	cmp	r3, #42	; 0x2a
 8002994:	d109      	bne.n	80029aa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2228      	movs	r2, #40	; 0x28
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff f80d 	bl	80019c4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b28      	cmp	r3, #40	; 0x28
 80029b4:	d111      	bne.n	80029da <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a15      	ldr	r2, [pc, #84]	; (8002a10 <I2C_Slave_STOPF+0x25c>)
 80029ba:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2220      	movs	r2, #32
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7ff f80e 	bl	80019f4 <HAL_I2C_ListenCpltCallback>
}
 80029d8:	e014      	b.n	8002a04 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	2b22      	cmp	r3, #34	; 0x22
 80029e0:	d002      	beq.n	80029e8 <I2C_Slave_STOPF+0x234>
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	2b22      	cmp	r3, #34	; 0x22
 80029e6:	d10d      	bne.n	8002a04 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7fe ffe0 	bl	80019c4 <HAL_I2C_SlaveRxCpltCallback>
}
 8002a04:	bf00      	nop
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	08002d61 	.word	0x08002d61
 8002a10:	ffff0000 	.word	0xffff0000

08002a14 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a22:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a28:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d002      	beq.n	8002a36 <I2C_Slave_AF+0x22>
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	d129      	bne.n	8002a8a <I2C_Slave_AF+0x76>
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	2b28      	cmp	r3, #40	; 0x28
 8002a3a:	d126      	bne.n	8002a8a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a2e      	ldr	r2, [pc, #184]	; (8002af8 <I2C_Slave_AF+0xe4>)
 8002a40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a50:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a5a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a6a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7fe ffb6 	bl	80019f4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002a88:	e031      	b.n	8002aee <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	2b21      	cmp	r3, #33	; 0x21
 8002a8e:	d129      	bne.n	8002ae4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a19      	ldr	r2, [pc, #100]	; (8002af8 <I2C_Slave_AF+0xe4>)
 8002a94:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2221      	movs	r2, #33	; 0x21
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002aba:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ac4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7fe fc44 	bl	8001364 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7fe ff67 	bl	80019b0 <HAL_I2C_SlaveTxCpltCallback>
}
 8002ae2:	e004      	b.n	8002aee <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002aec:	615a      	str	r2, [r3, #20]
}
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	ffff0000 	.word	0xffff0000

08002afc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b0a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b12:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002b14:	7bbb      	ldrb	r3, [r7, #14]
 8002b16:	2b10      	cmp	r3, #16
 8002b18:	d002      	beq.n	8002b20 <I2C_ITError+0x24>
 8002b1a:	7bbb      	ldrb	r3, [r7, #14]
 8002b1c:	2b40      	cmp	r3, #64	; 0x40
 8002b1e:	d10a      	bne.n	8002b36 <I2C_ITError+0x3a>
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
 8002b22:	2b22      	cmp	r3, #34	; 0x22
 8002b24:	d107      	bne.n	8002b36 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b34:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b3c:	2b28      	cmp	r3, #40	; 0x28
 8002b3e:	d107      	bne.n	8002b50 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2228      	movs	r2, #40	; 0x28
 8002b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b4e:	e015      	b.n	8002b7c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b5e:	d00a      	beq.n	8002b76 <I2C_ITError+0x7a>
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	2b60      	cmp	r3, #96	; 0x60
 8002b64:	d007      	beq.n	8002b76 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b8a:	d162      	bne.n	8002c52 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b9a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d020      	beq.n	8002bec <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bae:	4a6a      	ldr	r2, [pc, #424]	; (8002d58 <I2C_ITError+0x25c>)
 8002bb0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe f8a9 	bl	8000d0e <HAL_DMA_Abort_IT>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 8089 	beq.w	8002cd6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0201 	bic.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002be6:	4610      	mov	r0, r2
 8002be8:	4798      	blx	r3
 8002bea:	e074      	b.n	8002cd6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf0:	4a59      	ldr	r2, [pc, #356]	; (8002d58 <I2C_ITError+0x25c>)
 8002bf2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fe f888 	bl	8000d0e <HAL_DMA_Abort_IT>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d068      	beq.n	8002cd6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0e:	2b40      	cmp	r3, #64	; 0x40
 8002c10:	d10b      	bne.n	8002c2a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0201 	bic.w	r2, r2, #1
 8002c38:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	4798      	blx	r3
 8002c50:	e041      	b.n	8002cd6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b60      	cmp	r3, #96	; 0x60
 8002c5c:	d125      	bne.n	8002caa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c76:	2b40      	cmp	r3, #64	; 0x40
 8002c78:	d10b      	bne.n	8002c92 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0201 	bic.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fe fece 	bl	8001a44 <HAL_I2C_AbortCpltCallback>
 8002ca8:	e015      	b.n	8002cd6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb4:	2b40      	cmp	r3, #64	; 0x40
 8002cb6:	d10b      	bne.n	8002cd0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691a      	ldr	r2, [r3, #16]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7fe fead 	bl	8001a30 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10e      	bne.n	8002d04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d109      	bne.n	8002d04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d104      	bne.n	8002d04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d007      	beq.n	8002d14 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d12:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d1a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d113      	bne.n	8002d50 <I2C_ITError+0x254>
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
 8002d2a:	2b28      	cmp	r3, #40	; 0x28
 8002d2c:	d110      	bne.n	8002d50 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <I2C_ITError+0x260>)
 8002d32:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7fe fe52 	bl	80019f4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d50:	bf00      	nop
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	08002d61 	.word	0x08002d61
 8002d5c:	ffff0000 	.word	0xffff0000

08002d60 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d70:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d78:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d7a:	4b4b      	ldr	r3, [pc, #300]	; (8002ea8 <I2C_DMAAbort+0x148>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	08db      	lsrs	r3, r3, #3
 8002d80:	4a4a      	ldr	r2, [pc, #296]	; (8002eac <I2C_DMAAbort+0x14c>)
 8002d82:	fba2 2303 	umull	r2, r3, r2, r3
 8002d86:	0a1a      	lsrs	r2, r3, #8
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	00da      	lsls	r2, r3, #3
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d106      	bne.n	8002da8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f043 0220 	orr.w	r2, r3, #32
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002da6:	e00a      	b.n	8002dbe <I2C_DMAAbort+0x5e>
    }
    count--;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dbc:	d0ea      	beq.n	8002d94 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dca:	2200      	movs	r2, #0
 8002dcc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dda:	2200      	movs	r2, #0
 8002ddc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dec:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	2200      	movs	r2, #0
 8002df2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e00:	2200      	movs	r2, #0
 8002e02:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e10:	2200      	movs	r2, #0
 8002e12:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0201 	bic.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b60      	cmp	r3, #96	; 0x60
 8002e2e:	d10e      	bne.n	8002e4e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2200      	movs	r2, #0
 8002e44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e46:	6978      	ldr	r0, [r7, #20]
 8002e48:	f7fe fdfc 	bl	8001a44 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e4c:	e027      	b.n	8002e9e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e4e:	7cfb      	ldrb	r3, [r7, #19]
 8002e50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e54:	2b28      	cmp	r3, #40	; 0x28
 8002e56:	d117      	bne.n	8002e88 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e76:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2228      	movs	r2, #40	; 0x28
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e86:	e007      	b.n	8002e98 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002e98:	6978      	ldr	r0, [r7, #20]
 8002e9a:	f7fe fdc9 	bl	8001a30 <HAL_I2C_ErrorCallback>
}
 8002e9e:	bf00      	nop
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000000 	.word	0x20000000
 8002eac:	14f8b589 	.word	0x14f8b589

08002eb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ec0:	e048      	b.n	8002f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec8:	d044      	beq.n	8002f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eca:	f7fd fe03 	bl	8000ad4 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d302      	bcc.n	8002ee0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d139      	bne.n	8002f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	0c1b      	lsrs	r3, r3, #16
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d10d      	bne.n	8002f06 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	43da      	mvns	r2, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf0c      	ite	eq
 8002efc:	2301      	moveq	r3, #1
 8002efe:	2300      	movne	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	461a      	mov	r2, r3
 8002f04:	e00c      	b.n	8002f20 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	43da      	mvns	r2, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	4013      	ands	r3, r2
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d116      	bne.n	8002f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	f043 0220 	orr.w	r2, r3, #32
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e023      	b.n	8002f9c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	0c1b      	lsrs	r3, r3, #16
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d10d      	bne.n	8002f7a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	43da      	mvns	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	bf0c      	ite	eq
 8002f70:	2301      	moveq	r3, #1
 8002f72:	2300      	movne	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	461a      	mov	r2, r3
 8002f78:	e00c      	b.n	8002f94 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	43da      	mvns	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	4013      	ands	r3, r2
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d093      	beq.n	8002ec2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fb0:	e030      	b.n	8003014 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 f8c9 	bl	800314a <I2C_IsAcknowledgeFailed>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e030      	b.n	8003024 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc2:	f7fd fd87 	bl	8000ad4 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d302      	bcc.n	8002fd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d11d      	bne.n	8003014 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	f003 0310 	and.w	r3, r3, #16
 8002fe2:	2b10      	cmp	r3, #16
 8002fe4:	d016      	beq.n	8003014 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	f043 0220 	orr.w	r2, r3, #32
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e007      	b.n	8003024 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	2b10      	cmp	r3, #16
 8003020:	d1c7      	bne.n	8002fb2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003034:	2300      	movs	r3, #0
 8003036:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003038:	4b13      	ldr	r3, [pc, #76]	; (8003088 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	08db      	lsrs	r3, r3, #3
 800303e:	4a13      	ldr	r2, [pc, #76]	; (800308c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003040:	fba2 2303 	umull	r2, r3, r2, r3
 8003044:	0a1a      	lsrs	r2, r3, #8
 8003046:	4613      	mov	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	3b01      	subs	r3, #1
 8003052:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d107      	bne.n	800306a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f043 0220 	orr.w	r2, r3, #32
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e008      	b.n	800307c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003078:	d0e9      	beq.n	800304e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	20000000 	.word	0x20000000
 800308c:	14f8b589 	.word	0x14f8b589

08003090 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800309c:	e049      	b.n	8003132 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	2b10      	cmp	r3, #16
 80030aa:	d119      	bne.n	80030e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0210 	mvn.w	r2, #16
 80030b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e030      	b.n	8003142 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e0:	f7fd fcf8 	bl	8000ad4 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d302      	bcc.n	80030f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d11d      	bne.n	8003132 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003100:	2b40      	cmp	r3, #64	; 0x40
 8003102:	d016      	beq.n	8003132 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2220      	movs	r2, #32
 800310e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f043 0220 	orr.w	r2, r3, #32
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e007      	b.n	8003142 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313c:	2b40      	cmp	r3, #64	; 0x40
 800313e:	d1ae      	bne.n	800309e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003160:	d11b      	bne.n	800319a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800316a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f043 0204 	orr.w	r2, r3, #4
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80031b8:	d103      	bne.n	80031c2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80031c0:	e007      	b.n	80031d2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80031ca:	d102      	bne.n	80031d2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2208      	movs	r2, #8
 80031d0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
	...

080031e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e267      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d075      	beq.n	80032ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031fe:	4b88      	ldr	r3, [pc, #544]	; (8003420 <HAL_RCC_OscConfig+0x240>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 030c 	and.w	r3, r3, #12
 8003206:	2b04      	cmp	r3, #4
 8003208:	d00c      	beq.n	8003224 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800320a:	4b85      	ldr	r3, [pc, #532]	; (8003420 <HAL_RCC_OscConfig+0x240>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003212:	2b08      	cmp	r3, #8
 8003214:	d112      	bne.n	800323c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003216:	4b82      	ldr	r3, [pc, #520]	; (8003420 <HAL_RCC_OscConfig+0x240>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003222:	d10b      	bne.n	800323c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003224:	4b7e      	ldr	r3, [pc, #504]	; (8003420 <HAL_RCC_OscConfig+0x240>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d05b      	beq.n	80032e8 <HAL_RCC_OscConfig+0x108>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d157      	bne.n	80032e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e242      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003244:	d106      	bne.n	8003254 <HAL_RCC_OscConfig+0x74>
 8003246:	4b76      	ldr	r3, [pc, #472]	; (8003420 <HAL_RCC_OscConfig+0x240>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a75      	ldr	r2, [pc, #468]	; (8003420 <HAL_RCC_OscConfig+0x240>)
 800324c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e01d      	b.n	8003290 <HAL_RCC_OscConfig+0xb0>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800325c:	d10c      	bne.n	8003278 <HAL_RCC_OscConfig+0x98>
 800325e:	4b70      	ldr	r3, [pc, #448]	; (8003420 <HAL_RCC_OscConfig+0x240>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a6f      	ldr	r2, [pc, #444]	; (8003420 <HAL_RCC_OscConfig+0x240>)
 8003264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	4b6d      	ldr	r3, [pc, #436]	; (8003420 <HAL_RCC_OscConfig+0x240>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a6c      	ldr	r2, [pc, #432]	; (8003420 <HAL_RCC_OscConfig+0x240>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e00b      	b.n	8003290 <HAL_RCC_OscConfig+0xb0>
 8003278:	4b69      	ldr	r3, [pc, #420]	; (8003420 <HAL_RCC_OscConfig+0x240>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a68      	ldr	r2, [pc, #416]	; (8003420 <HAL_RCC_OscConfig+0x240>)
 800327e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	4b66      	ldr	r3, [pc, #408]	; (8003420 <HAL_RCC_OscConfig+0x240>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a65      	ldr	r2, [pc, #404]	; (8003420 <HAL_RCC_OscConfig+0x240>)
 800328a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800328e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d013      	beq.n	80032c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003298:	f7fd fc1c 	bl	8000ad4 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a0:	f7fd fc18 	bl	8000ad4 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b64      	cmp	r3, #100	; 0x64
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e207      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b2:	4b5b      	ldr	r3, [pc, #364]	; (8003420 <HAL_RCC_OscConfig+0x240>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0xc0>
 80032be:	e014      	b.n	80032ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7fd fc08 	bl	8000ad4 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c8:	f7fd fc04 	bl	8000ad4 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b64      	cmp	r3, #100	; 0x64
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e1f3      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032da:	4b51      	ldr	r3, [pc, #324]	; (8003420 <HAL_RCC_OscConfig+0x240>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0xe8>
 80032e6:	e000      	b.n	80032ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d063      	beq.n	80033be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032f6:	4b4a      	ldr	r3, [pc, #296]	; (8003420 <HAL_RCC_OscConfig+0x240>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00b      	beq.n	800331a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003302:	4b47      	ldr	r3, [pc, #284]	; (8003420 <HAL_RCC_OscConfig+0x240>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800330a:	2b08      	cmp	r3, #8
 800330c:	d11c      	bne.n	8003348 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800330e:	4b44      	ldr	r3, [pc, #272]	; (8003420 <HAL_RCC_OscConfig+0x240>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d116      	bne.n	8003348 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331a:	4b41      	ldr	r3, [pc, #260]	; (8003420 <HAL_RCC_OscConfig+0x240>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d005      	beq.n	8003332 <HAL_RCC_OscConfig+0x152>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d001      	beq.n	8003332 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e1c7      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003332:	4b3b      	ldr	r3, [pc, #236]	; (8003420 <HAL_RCC_OscConfig+0x240>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4937      	ldr	r1, [pc, #220]	; (8003420 <HAL_RCC_OscConfig+0x240>)
 8003342:	4313      	orrs	r3, r2
 8003344:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003346:	e03a      	b.n	80033be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d020      	beq.n	8003392 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003350:	4b34      	ldr	r3, [pc, #208]	; (8003424 <HAL_RCC_OscConfig+0x244>)
 8003352:	2201      	movs	r2, #1
 8003354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003356:	f7fd fbbd 	bl	8000ad4 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800335e:	f7fd fbb9 	bl	8000ad4 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e1a8      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003370:	4b2b      	ldr	r3, [pc, #172]	; (8003420 <HAL_RCC_OscConfig+0x240>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0f0      	beq.n	800335e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337c:	4b28      	ldr	r3, [pc, #160]	; (8003420 <HAL_RCC_OscConfig+0x240>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4925      	ldr	r1, [pc, #148]	; (8003420 <HAL_RCC_OscConfig+0x240>)
 800338c:	4313      	orrs	r3, r2
 800338e:	600b      	str	r3, [r1, #0]
 8003390:	e015      	b.n	80033be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003392:	4b24      	ldr	r3, [pc, #144]	; (8003424 <HAL_RCC_OscConfig+0x244>)
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7fd fb9c 	bl	8000ad4 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033a0:	f7fd fb98 	bl	8000ad4 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e187      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b2:	4b1b      	ldr	r3, [pc, #108]	; (8003420 <HAL_RCC_OscConfig+0x240>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d036      	beq.n	8003438 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d016      	beq.n	8003400 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033d2:	4b15      	ldr	r3, [pc, #84]	; (8003428 <HAL_RCC_OscConfig+0x248>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d8:	f7fd fb7c 	bl	8000ad4 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033e0:	f7fd fb78 	bl	8000ad4 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e167      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033f2:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <HAL_RCC_OscConfig+0x240>)
 80033f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x200>
 80033fe:	e01b      	b.n	8003438 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003400:	4b09      	ldr	r3, [pc, #36]	; (8003428 <HAL_RCC_OscConfig+0x248>)
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003406:	f7fd fb65 	bl	8000ad4 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800340c:	e00e      	b.n	800342c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800340e:	f7fd fb61 	bl	8000ad4 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d907      	bls.n	800342c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e150      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
 8003420:	40023800 	.word	0x40023800
 8003424:	42470000 	.word	0x42470000
 8003428:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800342c:	4b88      	ldr	r3, [pc, #544]	; (8003650 <HAL_RCC_OscConfig+0x470>)
 800342e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1ea      	bne.n	800340e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 8097 	beq.w	8003574 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003446:	2300      	movs	r3, #0
 8003448:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800344a:	4b81      	ldr	r3, [pc, #516]	; (8003650 <HAL_RCC_OscConfig+0x470>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10f      	bne.n	8003476 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003456:	2300      	movs	r3, #0
 8003458:	60bb      	str	r3, [r7, #8]
 800345a:	4b7d      	ldr	r3, [pc, #500]	; (8003650 <HAL_RCC_OscConfig+0x470>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	4a7c      	ldr	r2, [pc, #496]	; (8003650 <HAL_RCC_OscConfig+0x470>)
 8003460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003464:	6413      	str	r3, [r2, #64]	; 0x40
 8003466:	4b7a      	ldr	r3, [pc, #488]	; (8003650 <HAL_RCC_OscConfig+0x470>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346e:	60bb      	str	r3, [r7, #8]
 8003470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003472:	2301      	movs	r3, #1
 8003474:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003476:	4b77      	ldr	r3, [pc, #476]	; (8003654 <HAL_RCC_OscConfig+0x474>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347e:	2b00      	cmp	r3, #0
 8003480:	d118      	bne.n	80034b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003482:	4b74      	ldr	r3, [pc, #464]	; (8003654 <HAL_RCC_OscConfig+0x474>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a73      	ldr	r2, [pc, #460]	; (8003654 <HAL_RCC_OscConfig+0x474>)
 8003488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800348c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800348e:	f7fd fb21 	bl	8000ad4 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003496:	f7fd fb1d 	bl	8000ad4 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e10c      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a8:	4b6a      	ldr	r3, [pc, #424]	; (8003654 <HAL_RCC_OscConfig+0x474>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d106      	bne.n	80034ca <HAL_RCC_OscConfig+0x2ea>
 80034bc:	4b64      	ldr	r3, [pc, #400]	; (8003650 <HAL_RCC_OscConfig+0x470>)
 80034be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c0:	4a63      	ldr	r2, [pc, #396]	; (8003650 <HAL_RCC_OscConfig+0x470>)
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	6713      	str	r3, [r2, #112]	; 0x70
 80034c8:	e01c      	b.n	8003504 <HAL_RCC_OscConfig+0x324>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	2b05      	cmp	r3, #5
 80034d0:	d10c      	bne.n	80034ec <HAL_RCC_OscConfig+0x30c>
 80034d2:	4b5f      	ldr	r3, [pc, #380]	; (8003650 <HAL_RCC_OscConfig+0x470>)
 80034d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d6:	4a5e      	ldr	r2, [pc, #376]	; (8003650 <HAL_RCC_OscConfig+0x470>)
 80034d8:	f043 0304 	orr.w	r3, r3, #4
 80034dc:	6713      	str	r3, [r2, #112]	; 0x70
 80034de:	4b5c      	ldr	r3, [pc, #368]	; (8003650 <HAL_RCC_OscConfig+0x470>)
 80034e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e2:	4a5b      	ldr	r2, [pc, #364]	; (8003650 <HAL_RCC_OscConfig+0x470>)
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	6713      	str	r3, [r2, #112]	; 0x70
 80034ea:	e00b      	b.n	8003504 <HAL_RCC_OscConfig+0x324>
 80034ec:	4b58      	ldr	r3, [pc, #352]	; (8003650 <HAL_RCC_OscConfig+0x470>)
 80034ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f0:	4a57      	ldr	r2, [pc, #348]	; (8003650 <HAL_RCC_OscConfig+0x470>)
 80034f2:	f023 0301 	bic.w	r3, r3, #1
 80034f6:	6713      	str	r3, [r2, #112]	; 0x70
 80034f8:	4b55      	ldr	r3, [pc, #340]	; (8003650 <HAL_RCC_OscConfig+0x470>)
 80034fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fc:	4a54      	ldr	r2, [pc, #336]	; (8003650 <HAL_RCC_OscConfig+0x470>)
 80034fe:	f023 0304 	bic.w	r3, r3, #4
 8003502:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d015      	beq.n	8003538 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350c:	f7fd fae2 	bl	8000ad4 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003512:	e00a      	b.n	800352a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003514:	f7fd fade 	bl	8000ad4 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003522:	4293      	cmp	r3, r2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e0cb      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800352a:	4b49      	ldr	r3, [pc, #292]	; (8003650 <HAL_RCC_OscConfig+0x470>)
 800352c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0ee      	beq.n	8003514 <HAL_RCC_OscConfig+0x334>
 8003536:	e014      	b.n	8003562 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003538:	f7fd facc 	bl	8000ad4 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800353e:	e00a      	b.n	8003556 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003540:	f7fd fac8 	bl	8000ad4 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	f241 3288 	movw	r2, #5000	; 0x1388
 800354e:	4293      	cmp	r3, r2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e0b5      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003556:	4b3e      	ldr	r3, [pc, #248]	; (8003650 <HAL_RCC_OscConfig+0x470>)
 8003558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1ee      	bne.n	8003540 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003562:	7dfb      	ldrb	r3, [r7, #23]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d105      	bne.n	8003574 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003568:	4b39      	ldr	r3, [pc, #228]	; (8003650 <HAL_RCC_OscConfig+0x470>)
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	4a38      	ldr	r2, [pc, #224]	; (8003650 <HAL_RCC_OscConfig+0x470>)
 800356e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003572:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 80a1 	beq.w	80036c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800357e:	4b34      	ldr	r3, [pc, #208]	; (8003650 <HAL_RCC_OscConfig+0x470>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	2b08      	cmp	r3, #8
 8003588:	d05c      	beq.n	8003644 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d141      	bne.n	8003616 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003592:	4b31      	ldr	r3, [pc, #196]	; (8003658 <HAL_RCC_OscConfig+0x478>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003598:	f7fd fa9c 	bl	8000ad4 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a0:	f7fd fa98 	bl	8000ad4 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e087      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b2:	4b27      	ldr	r3, [pc, #156]	; (8003650 <HAL_RCC_OscConfig+0x470>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69da      	ldr	r2, [r3, #28]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	019b      	lsls	r3, r3, #6
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d4:	085b      	lsrs	r3, r3, #1
 80035d6:	3b01      	subs	r3, #1
 80035d8:	041b      	lsls	r3, r3, #16
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e0:	061b      	lsls	r3, r3, #24
 80035e2:	491b      	ldr	r1, [pc, #108]	; (8003650 <HAL_RCC_OscConfig+0x470>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035e8:	4b1b      	ldr	r3, [pc, #108]	; (8003658 <HAL_RCC_OscConfig+0x478>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ee:	f7fd fa71 	bl	8000ad4 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f6:	f7fd fa6d 	bl	8000ad4 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e05c      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003608:	4b11      	ldr	r3, [pc, #68]	; (8003650 <HAL_RCC_OscConfig+0x470>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f0      	beq.n	80035f6 <HAL_RCC_OscConfig+0x416>
 8003614:	e054      	b.n	80036c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003616:	4b10      	ldr	r3, [pc, #64]	; (8003658 <HAL_RCC_OscConfig+0x478>)
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361c:	f7fd fa5a 	bl	8000ad4 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003624:	f7fd fa56 	bl	8000ad4 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e045      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003636:	4b06      	ldr	r3, [pc, #24]	; (8003650 <HAL_RCC_OscConfig+0x470>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f0      	bne.n	8003624 <HAL_RCC_OscConfig+0x444>
 8003642:	e03d      	b.n	80036c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d107      	bne.n	800365c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e038      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
 8003650:	40023800 	.word	0x40023800
 8003654:	40007000 	.word	0x40007000
 8003658:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800365c:	4b1b      	ldr	r3, [pc, #108]	; (80036cc <HAL_RCC_OscConfig+0x4ec>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d028      	beq.n	80036bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003674:	429a      	cmp	r2, r3
 8003676:	d121      	bne.n	80036bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003682:	429a      	cmp	r2, r3
 8003684:	d11a      	bne.n	80036bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800368c:	4013      	ands	r3, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003692:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003694:	4293      	cmp	r3, r2
 8003696:	d111      	bne.n	80036bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a2:	085b      	lsrs	r3, r3, #1
 80036a4:	3b01      	subs	r3, #1
 80036a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d107      	bne.n	80036bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e000      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40023800 	.word	0x40023800

080036d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0cc      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036e4:	4b68      	ldr	r3, [pc, #416]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d90c      	bls.n	800370c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f2:	4b65      	ldr	r3, [pc, #404]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fa:	4b63      	ldr	r3, [pc, #396]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d001      	beq.n	800370c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0b8      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d020      	beq.n	800375a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003724:	4b59      	ldr	r3, [pc, #356]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	4a58      	ldr	r2, [pc, #352]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800372e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800373c:	4b53      	ldr	r3, [pc, #332]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	4a52      	ldr	r2, [pc, #328]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003746:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003748:	4b50      	ldr	r3, [pc, #320]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	494d      	ldr	r1, [pc, #308]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	4313      	orrs	r3, r2
 8003758:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d044      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d107      	bne.n	800377e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376e:	4b47      	ldr	r3, [pc, #284]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d119      	bne.n	80037ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e07f      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d003      	beq.n	800378e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800378a:	2b03      	cmp	r3, #3
 800378c:	d107      	bne.n	800379e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378e:	4b3f      	ldr	r3, [pc, #252]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d109      	bne.n	80037ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e06f      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379e:	4b3b      	ldr	r3, [pc, #236]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e067      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ae:	4b37      	ldr	r3, [pc, #220]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f023 0203 	bic.w	r2, r3, #3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	4934      	ldr	r1, [pc, #208]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037c0:	f7fd f988 	bl	8000ad4 <HAL_GetTick>
 80037c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c6:	e00a      	b.n	80037de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c8:	f7fd f984 	bl	8000ad4 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e04f      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037de:	4b2b      	ldr	r3, [pc, #172]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 020c 	and.w	r2, r3, #12
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d1eb      	bne.n	80037c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037f0:	4b25      	ldr	r3, [pc, #148]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d20c      	bcs.n	8003818 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fe:	4b22      	ldr	r3, [pc, #136]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003806:	4b20      	ldr	r3, [pc, #128]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d001      	beq.n	8003818 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e032      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003824:	4b19      	ldr	r3, [pc, #100]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	4916      	ldr	r1, [pc, #88]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	4313      	orrs	r3, r2
 8003834:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b00      	cmp	r3, #0
 8003840:	d009      	beq.n	8003856 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003842:	4b12      	ldr	r3, [pc, #72]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	490e      	ldr	r1, [pc, #56]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	4313      	orrs	r3, r2
 8003854:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003856:	f000 f821 	bl	800389c <HAL_RCC_GetSysClockFreq>
 800385a:	4602      	mov	r2, r0
 800385c:	4b0b      	ldr	r3, [pc, #44]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	091b      	lsrs	r3, r3, #4
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	490a      	ldr	r1, [pc, #40]	; (8003890 <HAL_RCC_ClockConfig+0x1c0>)
 8003868:	5ccb      	ldrb	r3, [r1, r3]
 800386a:	fa22 f303 	lsr.w	r3, r2, r3
 800386e:	4a09      	ldr	r2, [pc, #36]	; (8003894 <HAL_RCC_ClockConfig+0x1c4>)
 8003870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003872:	4b09      	ldr	r3, [pc, #36]	; (8003898 <HAL_RCC_ClockConfig+0x1c8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7fd f8e8 	bl	8000a4c <HAL_InitTick>

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40023c00 	.word	0x40023c00
 800388c:	40023800 	.word	0x40023800
 8003890:	08003b58 	.word	0x08003b58
 8003894:	20000000 	.word	0x20000000
 8003898:	20000004 	.word	0x20000004

0800389c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800389c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038a0:	b094      	sub	sp, #80	; 0x50
 80038a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	647b      	str	r3, [r7, #68]	; 0x44
 80038a8:	2300      	movs	r3, #0
 80038aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038ac:	2300      	movs	r3, #0
 80038ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038b4:	4b79      	ldr	r3, [pc, #484]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 030c 	and.w	r3, r3, #12
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d00d      	beq.n	80038dc <HAL_RCC_GetSysClockFreq+0x40>
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	f200 80e1 	bhi.w	8003a88 <HAL_RCC_GetSysClockFreq+0x1ec>
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_RCC_GetSysClockFreq+0x34>
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d003      	beq.n	80038d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80038ce:	e0db      	b.n	8003a88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038d0:	4b73      	ldr	r3, [pc, #460]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x204>)
 80038d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80038d4:	e0db      	b.n	8003a8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038d6:	4b73      	ldr	r3, [pc, #460]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x208>)
 80038d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038da:	e0d8      	b.n	8003a8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038dc:	4b6f      	ldr	r3, [pc, #444]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038e6:	4b6d      	ldr	r3, [pc, #436]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d063      	beq.n	80039ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038f2:	4b6a      	ldr	r3, [pc, #424]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	099b      	lsrs	r3, r3, #6
 80038f8:	2200      	movs	r2, #0
 80038fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80038fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003904:	633b      	str	r3, [r7, #48]	; 0x30
 8003906:	2300      	movs	r3, #0
 8003908:	637b      	str	r3, [r7, #52]	; 0x34
 800390a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800390e:	4622      	mov	r2, r4
 8003910:	462b      	mov	r3, r5
 8003912:	f04f 0000 	mov.w	r0, #0
 8003916:	f04f 0100 	mov.w	r1, #0
 800391a:	0159      	lsls	r1, r3, #5
 800391c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003920:	0150      	lsls	r0, r2, #5
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	4621      	mov	r1, r4
 8003928:	1a51      	subs	r1, r2, r1
 800392a:	6139      	str	r1, [r7, #16]
 800392c:	4629      	mov	r1, r5
 800392e:	eb63 0301 	sbc.w	r3, r3, r1
 8003932:	617b      	str	r3, [r7, #20]
 8003934:	f04f 0200 	mov.w	r2, #0
 8003938:	f04f 0300 	mov.w	r3, #0
 800393c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003940:	4659      	mov	r1, fp
 8003942:	018b      	lsls	r3, r1, #6
 8003944:	4651      	mov	r1, sl
 8003946:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800394a:	4651      	mov	r1, sl
 800394c:	018a      	lsls	r2, r1, #6
 800394e:	4651      	mov	r1, sl
 8003950:	ebb2 0801 	subs.w	r8, r2, r1
 8003954:	4659      	mov	r1, fp
 8003956:	eb63 0901 	sbc.w	r9, r3, r1
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003966:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800396a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800396e:	4690      	mov	r8, r2
 8003970:	4699      	mov	r9, r3
 8003972:	4623      	mov	r3, r4
 8003974:	eb18 0303 	adds.w	r3, r8, r3
 8003978:	60bb      	str	r3, [r7, #8]
 800397a:	462b      	mov	r3, r5
 800397c:	eb49 0303 	adc.w	r3, r9, r3
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800398e:	4629      	mov	r1, r5
 8003990:	024b      	lsls	r3, r1, #9
 8003992:	4621      	mov	r1, r4
 8003994:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003998:	4621      	mov	r1, r4
 800399a:	024a      	lsls	r2, r1, #9
 800399c:	4610      	mov	r0, r2
 800399e:	4619      	mov	r1, r3
 80039a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039a2:	2200      	movs	r2, #0
 80039a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80039a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039ac:	f7fc fc0c 	bl	80001c8 <__aeabi_uldivmod>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4613      	mov	r3, r2
 80039b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039b8:	e058      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ba:	4b38      	ldr	r3, [pc, #224]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	099b      	lsrs	r3, r3, #6
 80039c0:	2200      	movs	r2, #0
 80039c2:	4618      	mov	r0, r3
 80039c4:	4611      	mov	r1, r2
 80039c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039ca:	623b      	str	r3, [r7, #32]
 80039cc:	2300      	movs	r3, #0
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
 80039d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039d4:	4642      	mov	r2, r8
 80039d6:	464b      	mov	r3, r9
 80039d8:	f04f 0000 	mov.w	r0, #0
 80039dc:	f04f 0100 	mov.w	r1, #0
 80039e0:	0159      	lsls	r1, r3, #5
 80039e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039e6:	0150      	lsls	r0, r2, #5
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	4641      	mov	r1, r8
 80039ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80039f2:	4649      	mov	r1, r9
 80039f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a0c:	ebb2 040a 	subs.w	r4, r2, sl
 8003a10:	eb63 050b 	sbc.w	r5, r3, fp
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	f04f 0300 	mov.w	r3, #0
 8003a1c:	00eb      	lsls	r3, r5, #3
 8003a1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a22:	00e2      	lsls	r2, r4, #3
 8003a24:	4614      	mov	r4, r2
 8003a26:	461d      	mov	r5, r3
 8003a28:	4643      	mov	r3, r8
 8003a2a:	18e3      	adds	r3, r4, r3
 8003a2c:	603b      	str	r3, [r7, #0]
 8003a2e:	464b      	mov	r3, r9
 8003a30:	eb45 0303 	adc.w	r3, r5, r3
 8003a34:	607b      	str	r3, [r7, #4]
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a42:	4629      	mov	r1, r5
 8003a44:	028b      	lsls	r3, r1, #10
 8003a46:	4621      	mov	r1, r4
 8003a48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a4c:	4621      	mov	r1, r4
 8003a4e:	028a      	lsls	r2, r1, #10
 8003a50:	4610      	mov	r0, r2
 8003a52:	4619      	mov	r1, r3
 8003a54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a56:	2200      	movs	r2, #0
 8003a58:	61bb      	str	r3, [r7, #24]
 8003a5a:	61fa      	str	r2, [r7, #28]
 8003a5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a60:	f7fc fbb2 	bl	80001c8 <__aeabi_uldivmod>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4613      	mov	r3, r2
 8003a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a6c:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	0c1b      	lsrs	r3, r3, #16
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	3301      	adds	r3, #1
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a86:	e002      	b.n	8003a8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a88:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3750      	adds	r7, #80	; 0x50
 8003a94:	46bd      	mov	sp, r7
 8003a96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	00f42400 	.word	0x00f42400
 8003aa4:	007a1200 	.word	0x007a1200

08003aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aac:	4b03      	ldr	r3, [pc, #12]	; (8003abc <HAL_RCC_GetHCLKFreq+0x14>)
 8003aae:	681b      	ldr	r3, [r3, #0]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	20000000 	.word	0x20000000

08003ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ac4:	f7ff fff0 	bl	8003aa8 <HAL_RCC_GetHCLKFreq>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	0a9b      	lsrs	r3, r3, #10
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	4903      	ldr	r1, [pc, #12]	; (8003ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ad6:	5ccb      	ldrb	r3, [r1, r3]
 8003ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	08003b68 	.word	0x08003b68

08003ae8 <memset>:
 8003ae8:	4402      	add	r2, r0
 8003aea:	4603      	mov	r3, r0
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d100      	bne.n	8003af2 <memset+0xa>
 8003af0:	4770      	bx	lr
 8003af2:	f803 1b01 	strb.w	r1, [r3], #1
 8003af6:	e7f9      	b.n	8003aec <memset+0x4>

08003af8 <__libc_init_array>:
 8003af8:	b570      	push	{r4, r5, r6, lr}
 8003afa:	4d0d      	ldr	r5, [pc, #52]	; (8003b30 <__libc_init_array+0x38>)
 8003afc:	4c0d      	ldr	r4, [pc, #52]	; (8003b34 <__libc_init_array+0x3c>)
 8003afe:	1b64      	subs	r4, r4, r5
 8003b00:	10a4      	asrs	r4, r4, #2
 8003b02:	2600      	movs	r6, #0
 8003b04:	42a6      	cmp	r6, r4
 8003b06:	d109      	bne.n	8003b1c <__libc_init_array+0x24>
 8003b08:	4d0b      	ldr	r5, [pc, #44]	; (8003b38 <__libc_init_array+0x40>)
 8003b0a:	4c0c      	ldr	r4, [pc, #48]	; (8003b3c <__libc_init_array+0x44>)
 8003b0c:	f000 f818 	bl	8003b40 <_init>
 8003b10:	1b64      	subs	r4, r4, r5
 8003b12:	10a4      	asrs	r4, r4, #2
 8003b14:	2600      	movs	r6, #0
 8003b16:	42a6      	cmp	r6, r4
 8003b18:	d105      	bne.n	8003b26 <__libc_init_array+0x2e>
 8003b1a:	bd70      	pop	{r4, r5, r6, pc}
 8003b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b20:	4798      	blx	r3
 8003b22:	3601      	adds	r6, #1
 8003b24:	e7ee      	b.n	8003b04 <__libc_init_array+0xc>
 8003b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b2a:	4798      	blx	r3
 8003b2c:	3601      	adds	r6, #1
 8003b2e:	e7f2      	b.n	8003b16 <__libc_init_array+0x1e>
 8003b30:	08003b78 	.word	0x08003b78
 8003b34:	08003b78 	.word	0x08003b78
 8003b38:	08003b78 	.word	0x08003b78
 8003b3c:	08003b7c 	.word	0x08003b7c

08003b40 <_init>:
 8003b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b42:	bf00      	nop
 8003b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b46:	bc08      	pop	{r3}
 8003b48:	469e      	mov	lr, r3
 8003b4a:	4770      	bx	lr

08003b4c <_fini>:
 8003b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4e:	bf00      	nop
 8003b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b52:	bc08      	pop	{r3}
 8003b54:	469e      	mov	lr, r3
 8003b56:	4770      	bx	lr
